(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     48010,       1210]
NotebookOptionsPosition[     47559,       1190]
NotebookOutlinePosition[     47902,       1205]
CellTagsIndexPosition[     47859,       1202]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"repeat", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer", ",", 
    "v_Integer"}], "]"}], ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"IntegerReverse", "[", 
            RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
        "i", ",", "m"}], "]"}], ",", "v"}], "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listRepeat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"IntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i",
        ",", "m"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listRepeat2", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", " ", "/@", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
          "i", ",", "m"}], "]"}], ",", "b"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"countRepeat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"IntegerReverse", "[", 
          RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i", 
      ",", "m"}], "]"}], "]"}], "-", "1"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"finalRepeat", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"repeat", "[", 
      RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listRepeat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"listRepeat2", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"countRepeat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"countPalindrome", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestWhileList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"IntegerReverse", "[", 
          RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i", 
      ",", 
      RowBox[{
       RowBox[{
        RowBox[{"IntegerDigits", "[", 
         RowBox[{
          RowBox[{"IntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
        RowBox[{"IntegerDigits", "[", 
         RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], "]"}],
     "]"}], "-", "1"}]}], "\n", 
 RowBox[{
  RowBox[{"listPalindrome", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestWhileList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"IntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i",
        ",", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerDigits", "[", 
          RowBox[{
           RowBox[{"IntegerReverse", "[", 
            RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
      "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listPalindrome2", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", " ", "/@", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestWhileList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
          "i", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"IntegerDigits", "[", 
             RowBox[{
              RowBox[{"IntegerReverse", "[", 
               RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
            RowBox[{"IntegerDigits", "[", 
             RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
         "]"}], ",", "b"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"palindrome", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], "]"}],
   ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestWhileList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"IntegerReverse", "[", 
            RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
        "i", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"IntegerDigits", "[", 
           RowBox[{
            RowBox[{"IntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
       "]"}], ",", "v"}], "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"finalPalindrome", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"palindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listPalindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"listPalindrome2", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"countPalindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rat", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], "]"}],
   ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"FromDigits", "[", 
           RowBox[{"Sort", "[", 
            RowBox[{"IntegerDigits", "[", 
             RowBox[{
              RowBox[{"IntegerReverse", "[", 
               RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
           "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "v"}], 
     "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"countRat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"FromDigits", "[", 
         RowBox[{"Sort", "[", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{
            RowBox[{"IntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}], 
        ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], "-", "1"}]}], "\n", 
 RowBox[{
  RowBox[{"listRat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"FromDigits", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}],
          ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listRat2", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", " ", "/@", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"FromDigits", "[", 
             RowBox[{"Sort", "[", 
              RowBox[{"IntegerDigits", "[", 
               RowBox[{
                RowBox[{"IntegerReverse", "[", 
                 RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
             "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "b"}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"finalRat", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"rat", "[", 
     RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
    RowBox[{"listRat", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
    RowBox[{"listRat2", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
    RowBox[{"countRat", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
    RowBox[{"ftrRat", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ftrRat", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"FindTransientRepeat", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"FromDigits", "[", 
              RowBox[{"Sort", "[", 
               RowBox[{"IntegerDigits", "[", 
                RowBox[{
                 RowBox[{"IntegerReverse", "[", 
                  RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
              "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "2"}], 
        "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}], "=!=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"NestGraph", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"FromDigits", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}],
          ")"}], "&"}], ",", "i", ",", "m", ",", 
       RowBox[{"VertexLabels", "->", "\"\<Name\>\""}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", 
     "\"\<No repeating patten detected\>\""}], "]"}]}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"reorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer", ",", 
    "v_Integer"}], "]"}], ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"FromDigits", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"Delete", "[", 
               RowBox[{
                RowBox[{"Prepend", "[", 
                 RowBox[{
                  RowBox[{"IntegerDigits", "[", 
                   RowBox[{"#", ",", "b"}], "]"}], ",", 
                  RowBox[{"Take", "[", 
                   RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
                RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
           "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "v"}], 
     "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listReorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], "]"}],
   ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FromDigits", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"Delete", "[", 
              RowBox[{
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"IntegerDigits", "[", 
                  RowBox[{"#", ",", "b"}], "]"}], ",", 
                 RowBox[{"Take", "[", 
                  RowBox[{
                   RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                   RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
          "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listReorder2", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], "]"}],
   ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", "/@", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FromDigits", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"Delete", "[", 
                 RowBox[{
                  RowBox[{"Prepend", "[", 
                   RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
                  RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
             "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "b"}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"countReorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], "]"}],
   ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"FromDigits", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"Delete", "[", 
             RowBox[{
              RowBox[{"Prepend", "[", 
               RowBox[{
                RowBox[{"IntegerDigits", "[", 
                 RowBox[{"#", ",", "b"}], "]"}], ",", 
                RowBox[{"Take", "[", 
                 RowBox[{
                  RowBox[{"IntegerDigits", "[", 
                   RowBox[{"#", ",", "b"}], "]"}], ",", 
                  RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
              RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
         "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], "-", 
   "1"}]}], "\n", 
 RowBox[{
  RowBox[{"finalReorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer", ",", 
    "v_Integer"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"reorder", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b", ",", "v"}], "]"}], ",", 
    RowBox[{"listReorder", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}], ",", 
    RowBox[{"listReorder2", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}], ",", 
    RowBox[{"countReorder", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}]}], "}"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.676653260516526*^9, 3.6766532678877783`*^9}, {
   3.6767189481841288`*^9, 3.6767189725165663`*^9}, {3.6767232893356605`*^9, 
   3.676723298550408*^9}, 3.676723376492013*^9, {3.676723484577406*^9, 
   3.676723502898902*^9}, {3.6767235501345234`*^9, 3.6767235622074003`*^9}, 
   3.6767235972033367`*^9, {3.6767236337808065`*^9, 3.676723643551206*^9}, {
   3.6767236814075193`*^9, 3.676723685815905*^9}, {3.6767238290916967`*^9, 
   3.6767238621487455`*^9}, {3.6767238929520473`*^9, 
   3.6767239021793995`*^9}, {3.6767282664738555`*^9, 3.676728277410548*^9}, {
   3.6767318180600023`*^9, 3.6767318297564354`*^9}, {3.6767318603907537`*^9, 
   3.6767318644960675`*^9}, 3.6767318951644692`*^9, {3.676732845683501*^9, 
   3.6767328624937367`*^9}, {3.6767329185385056`*^9, 3.676732985285446*^9}, {
   3.6767333170288615`*^9, 3.6767333276877584`*^9}, {3.6767340182766857`*^9, 
   3.676734019949273*^9}, {3.676734948531687*^9, 3.676734990994917*^9}, {
   3.6767370308652196`*^9, 3.676737030986958*^9}, {3.6767371440549636`*^9, 
   3.6767372026286182`*^9}, {3.676737236486802*^9, 3.6767372733334055`*^9}, {
   3.6767375723193207`*^9, 3.6767376213374047`*^9}, {3.6767376588222485`*^9, 
   3.6767376594523306`*^9}, {3.6767377046689987`*^9, 
   3.6767377169193134`*^9}, {3.6767377519103537`*^9, 3.676737822400695*^9}},
 CellID->164523105],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"func", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"finalPalindrome", "[", 
        RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", " ", 
       RowBox[{"finalRepeat", "[", 
        RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
       RowBox[{"finalReorder", "[", 
        RowBox[{"i", ",", "m", ",", "r", ",", "b", ",", "v"}], "]"}], ",", 
       RowBox[{"finalRat", "[", 
        RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}]}], "}"}]}], ";", 
    RowBox[{"Pane", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "\[Equal]", "4"}], ",", 
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<visual representation in base \>\"", "<>", 
               RowBox[{"ToString", "[", "v", "]"}]}], ",", 
              "\"\<numbers after each iteration in base 10\>\"", ",", 
              RowBox[{"\"\<numbers after each iteration in base \>\"", "<>", 
               RowBox[{"ToString", "[", "b", "]"}]}], ",", 
              "\"\<number of iterations\>\"", ",", 
              "\"\<NestGraph (if there is a repeating pattern)\>\""}], "}"}], 
            ",", 
            RowBox[{"func", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"Frame", "\[Rule]", "All"}], ",", 
          RowBox[{"ItemSize", "\[Rule]", "Full"}]}], "]"}], ",", 
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<visual representation in base \>\"", "<>", 
               RowBox[{"ToString", "[", "v", "]"}]}], ",", 
              "\"\<numbers after each iteration in base 10\>\"", ",", 
              RowBox[{"\"\<numbers after each iteration in base \>\"", "<>", 
               RowBox[{"ToString", "[", "b", "]"}]}], ",", 
              "\"\<number of iterations\>\""}], "}"}], ",", 
            RowBox[{"func", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"Frame", "\[Rule]", "All"}], ",", 
          RowBox[{"ItemSize", "\[Rule]", "Full"}]}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"600", ",", "300"}], "}"}], ",", 
      RowBox[{"Scrollbars", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<Algorithms:\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "1", "\[Rule]", " ", "\"\<196-Algorithm Palindrome checker\>\""}], ",", 
       RowBox[{"2", "\[Rule]", " ", "\"\<196-Algorithm\>\""}], ",", 
       RowBox[{"3", "\[Rule]", " ", "\"\<Reorder-Algorithm\>\""}], ",", 
       RowBox[{"4", "\[Rule]", " ", "\"\<RATS sequence\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", " ", "SetterBar"}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "10", ",", "\"\<initial value in base 10\>\""}], 
      "}"}], ",", "10", ",", "100000", ",", "1", ",", " ", 
     RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "\"\<max number of iterations\>\""}], "}"}],
      ",", "1", ",", "500", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"r", ",", "1", ",", "\"\<number of digits reordered\>\""}], 
      "}"}], ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"i", ",", "b"}], "]"}], "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", "10", ",", "\"\<base to compute algorithm\>\""}], 
      "}"}], ",", " ", "2", ",", "10", ",", "1", ",", " ", 
     RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", ",", "2", ",", "\"\<base to represent iterations\>\""}], 
      "}"}], ",", " ", "2", ",", "10", ",", "1", ",", " ", 
     RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "None"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6767218266830454`*^9, 3.6767219017602787`*^9}, {
   3.676722046836994*^9, 3.67672214696914*^9}, {3.67672221578773*^9, 
   3.6767222319803996`*^9}, {3.6767225187594786`*^9, 3.6767226632265997`*^9}, 
   3.6767227405146112`*^9, 3.676722805452067*^9, {3.6767229438513436`*^9, 
   3.676722950229633*^9}, 3.6767231148007703`*^9, 3.6767231469798975`*^9, {
   3.6767294590517616`*^9, 3.6767294621667576`*^9}, {3.676730311802272*^9, 
   3.6767303294439726`*^9}, 3.676730432114109*^9, {3.676730740013587*^9, 
   3.6767307611442823`*^9}, {3.6767313204090233`*^9, 3.676731334485757*^9}, {
   3.67673136640275*^9, 3.6767313894417953`*^9}, 3.6767330186335964`*^9, 
   3.676733869732646*^9, 3.676734371053935*^9, {3.676734664434758*^9, 
   3.67673467011994*^9}, {3.6767347294409695`*^9, 3.6767348466480923`*^9}, {
   3.6767351593815107`*^9, 3.676735219257519*^9}, {3.676735257015481*^9, 
   3.676735258609335*^9}, {3.676735315550415*^9, 3.6767353736489162`*^9}, {
   3.6767354325570126`*^9, 3.6767354461863422`*^9}, {3.676735706877205*^9, 
   3.6767357075719476`*^9}, {3.676735753932913*^9, 3.6767357747599893`*^9}, {
   3.676736151103757*^9, 3.6767364368127475`*^9}, {3.6767365250324526`*^9, 
   3.676736525551403*^9}, 3.676736742046564*^9, {3.676737070463056*^9, 
   3.676737099553058*^9}, {3.676737966576279*^9, 3.6767380156077724`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 10, $CellContext`i$$ = 
    196, $CellContext`m$$ = 104, $CellContext`n$$ = 4, $CellContext`r$$ = 
    1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1, "Algorithms:"}, {
      1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
       "Reorder-Algorithm", 4 -> "RATS sequence"}}, {{
       Hold[$CellContext`i$$], 10, "initial value in base 10"}, 10, 100000, 
      1}, {{
       Hold[$CellContext`m$$], 1, "max number of iterations"}, 1, 500, 1}, {{
       Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
      Dynamic[
       Length[
        IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
       Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
       Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 1}},
     Typeset`size$$ = {600., {146., 154.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`n$87168$$ = False, $CellContext`i$87169$$ = 
    0, $CellContext`m$87170$$ = 0, $CellContext`r$87171$$ = 
    0, $CellContext`b$87172$$ = 0, $CellContext`v$87173$$ = 0}, 
    DynamicBox[ToBoxes[
      RawBoxes[
       Manipulate`ManipulateBoxes[
       1, StandardForm, 
        "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
          10, $CellContext`m$$ = 1, $CellContext`n$$ = 1, $CellContext`r$$ = 
          1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
          Hold[$CellContext`n$$, $CellContext`n$87168$$, False], 
          Hold[$CellContext`i$$, $CellContext`i$87169$$, 0], 
          Hold[$CellContext`m$$, $CellContext`m$87170$$, 0], 
          Hold[$CellContext`r$$, $CellContext`r$87171$$, 0], 
          Hold[$CellContext`b$$, $CellContext`b$87172$$, 0], 
          Hold[$CellContext`v$$, $CellContext`v$87173$$, 0]}, 
        "OtherVariables" :> {
         Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
          Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
          Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
          Typeset`initDone$$, Typeset`skipInitDone$$}, 
        "Body" :> ($CellContext`func = {
            $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
            $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
            $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
            $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Pane[
           If[$CellContext`n$$ == 4, 
            Grid[{{
               StringJoin["visual representation in base ", 
                ToString[$CellContext`v$$]], 
               "numbers after each iteration in base 10", 
               StringJoin["numbers after each iteration in base ", 
                ToString[$CellContext`b$$]], "number of iterations", 
               "NestGraph (if there is a repeating pattern)"}, 
              Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
             ItemSize -> Full], 
            Grid[{{
               StringJoin["visual representation in base ", 
                ToString[$CellContext`v$$]], 
               "numbers after each iteration in base 10", 
               StringJoin["numbers after each iteration in base ", 
                ToString[$CellContext`b$$]], "number of iterations"}, 
              Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
             ItemSize -> Full]], {600, 300}, Scrollbars -> {True, False}]), 
        "Specifications" :> {{{$CellContext`n$$, 1, "Algorithms:"}, {
           1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
            "Reorder-Algorithm", 4 -> "RATS sequence"}, ControlType -> 
           SetterBar}, 
          Delimiter, {{$CellContext`i$$, 10, "initial value in base 10"}, 10, 
           100000, 1, Appearance -> 
           "Labeled"}, {{$CellContext`m$$, 1, "max number of iterations"}, 1, 
           500, 1, Appearance -> 
           "Labeled"}, {{$CellContext`r$$, 1, "number of digits reordered"}, 
           1, 
           Dynamic[
            Length[
             IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, 
           Appearance -> 
           "Labeled"}, {{$CellContext`b$$, 10, "base to compute algorithm"}, 
           2, 10, 1, ControlType -> 
           PopupMenu}, {{$CellContext`v$$, 2, "base to represent iterations"},
            2, 10, 1, ControlType -> PopupMenu}}, 
        "Options" :> {FrameMargins -> None}, "DefaultOptions" :> {}]], 
      StandardForm],
     ImageSizeCache->{637., {261., 268.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`func = {{
          Graphics[
           Raster[{{0, 1, 0, 0}, {0, 1, 0, 1}}, {{0, 0}, {4, 2}}, {0, 1}], 
           Frame -> Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 1}, {
          Graphics[
           Raster[{{0, 1, 0, 0}, {0, 1, 0, 1}}, {{0, 0}, {4, 2}}, {0, 1}], 
           Frame -> Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 1}, {
          Graphics[
           Raster[{{0, 1, 0, 0}, {0, 1, 0, 1}}, {{0, 0}, {4, 2}}, {0, 1}], 
           Frame -> Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 1}, {
          Graphics[
           Raster[{{0, 1, 0, 0}, {0, 1, 0, 1}}, {{0, 0}, {4, 2}}, {0, 1}], 
           Frame -> Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           Column[{10, 11}], {270, 255}, Scrollbars -> {False, True}], 1, 
          "No repeating patten detected"}}, $CellContext`finalPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
         $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`v]]], $CellContext`listPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestWhileList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
           IntegerDigits[
             IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
           IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]], {270, 
         255}, Scrollbars -> {False, True}], $CellContext`listPalindrome2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestWhileList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
             IntegerDigits[
               IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
             IntegerDigits[#, $CellContext`b]& , 
             1, $CellContext`m], $CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestWhileList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
           IntegerDigits[
             IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
           IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
        1, $CellContext`finalRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`listRepeat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`finalReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`reorder[$CellContext`i, $CellContext`m, $CellContext`r, \
$CellContext`b, $CellContext`v], 
         $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], {
         270, 255}, Scrollbars -> {False, True}], $CellContext`listReorder2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestList[FromDigits[
               Flatten[
                Delete[
                 Prepend[
                  IntegerDigits[#, $CellContext`b], 
                  Take[
                   
                   IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
        1, $CellContext`finalRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRat[$CellContext`i, $CellContext`m, $CellContext`b], 
         $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestList[FromDigits[
            Sort[
             IntegerDigits[
             IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`listRat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestList[FromDigits[
              Sort[
               IntegerDigits[
               IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
            Sort[
             IntegerDigits[
             IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`ftrRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := If[Part[
           FindTransientRepeat[
            NestList[FromDigits[
              Sort[
               IntegerDigits[
               IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], 2], 2] =!= {}, 
         NestGraph[FromDigits[
           Sort[
            IntegerDigits[
            IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m, VertexLabels -> "Name", ImageSize -> Full], 
         "No repeating patten detected"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.676721904412631*^9, 3.676722233965971*^9, 3.6767226022328205`*^9, 
   3.6767226684045286`*^9, 3.676723085703829*^9, 3.6767231484425087`*^9, 
   3.676723697559181*^9, 3.676723791123997*^9, {3.676723906941966*^9, 
   3.6767239305612125`*^9}, {3.6767240450739374`*^9, 3.6767240600817804`*^9}, 
   3.6767282880974503`*^9, 3.676729465434126*^9, {3.6767307534160557`*^9, 
   3.6767307631594415`*^9}, 3.676731336018299*^9, {3.6767313803660603`*^9, 
   3.676731390853942*^9}, 3.676731905524514*^9, 3.676732853288357*^9, 
   3.676732989829275*^9, 3.6767333332382574`*^9, 3.6767338752257175`*^9, 
   3.6767343725416603`*^9, 3.676734671299675*^9, 3.6767348484582777`*^9, 
   3.6767349186574965`*^9, 3.676734995388563*^9, 3.676735067748292*^9, 
   3.676735261358082*^9, 3.676735708869014*^9, {3.6767357565682955`*^9, 
   3.6767357763775673`*^9}, {3.676736233056108*^9, 3.676736294560543*^9}, {
   3.6767363625715914`*^9, 3.676736376437996*^9}, {3.676736413821129*^9, 
   3.676736438005344*^9}, 3.6767367444141483`*^9, 3.676737037389201*^9, {
   3.676737073666535*^9, 3.676737100677517*^9}, {3.67673715135892*^9, 
   3.6767371784911366`*^9}, 3.6767372117144175`*^9, 3.676737286582102*^9, {
   3.6767375769538546`*^9, 3.6767375982540555`*^9}, 3.6767376662339354`*^9, {
   3.676737729045136*^9, 3.6767377871354656`*^9}, 3.6767378397832727`*^9, {
   3.6767379874283957`*^9, 3.6767380181316924`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6767364675529847`*^9, 3.676736504675927*^9}, 
   3.676737682329102*^9}]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (June 18, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 19003, 520, 750, "Input",
 InitializationCell->True,
 CellID->164523105],
Cell[CellGroupData[{
Cell[19586, 544, 5920, 124, 221, "Input"],
Cell[25509, 670, 21911, 513, 546, "Output"]
}, Open  ]],
Cell[47435, 1186, 120, 2, 30, "Input"]
}
]
*)

