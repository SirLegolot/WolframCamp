(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    125606,       3138]
NotebookOptionsPosition[    121372,       3010]
NotebookOutlinePosition[    122983,       3060]
CellTagsIndexPosition[    122647,       3048]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Generating and Visualizing Sequences in Different Bases", "DemoTitle",
 CellChangeTimes->{3.6767381305078516`*^9}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"repeat", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], "]"}],
   ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"IntegerReverse", "[", 
            RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
        "i", ",", "m"}], "]"}], ",", "v"}], "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listRepeat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"IntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i",
        ",", "m"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listRepeat2", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", " ", "/@", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
          "i", ",", "m"}], "]"}], ",", "b"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"countRepeat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"IntegerReverse", "[", 
          RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i", 
      ",", "m"}], "]"}], "]"}], "-", "1"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"finalRepeat", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"repeat", "[", 
      RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listRepeat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"listRepeat2", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"countRepeat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"countPalindrome", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestWhileList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"IntegerReverse", "[", 
          RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i", 
      ",", 
      RowBox[{
       RowBox[{
        RowBox[{"IntegerDigits", "[", 
         RowBox[{
          RowBox[{"IntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
        RowBox[{"IntegerDigits", "[", 
         RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], "]"}],
     "]"}], "-", "1"}]}], "\n", 
 RowBox[{
  RowBox[{"listPalindrome", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestWhileList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"IntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i",
        ",", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerDigits", "[", 
          RowBox[{
           RowBox[{"IntegerReverse", "[", 
            RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
      "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listPalindrome2", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", " ", "/@", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestWhileList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
          "i", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"IntegerDigits", "[", 
             RowBox[{
              RowBox[{"IntegerReverse", "[", 
               RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
            RowBox[{"IntegerDigits", "[", 
             RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
         "]"}], ",", "b"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"palindrome", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], "]"}],
   ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestWhileList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"IntegerReverse", "[", 
            RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
        "i", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"IntegerDigits", "[", 
           RowBox[{
            RowBox[{"IntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
       "]"}], ",", "v"}], "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"finalPalindrome", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"palindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listPalindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"listPalindrome2", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"countPalindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"rat", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], "]"}],
   ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"FromDigits", "[", 
           RowBox[{"Sort", "[", 
            RowBox[{"IntegerDigits", "[", 
             RowBox[{
              RowBox[{"IntegerReverse", "[", 
               RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
           "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "v"}], 
     "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"countRat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"FromDigits", "[", 
         RowBox[{"Sort", "[", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{
            RowBox[{"IntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}], 
        ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], "-", "1"}]}], "\n", 
 RowBox[{
  RowBox[{"listRat", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"FromDigits", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}],
          ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listRat2", "[", 
   RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", " ", "/@", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"FromDigits", "[", 
             RowBox[{"Sort", "[", 
              RowBox[{"IntegerDigits", "[", 
               RowBox[{
                RowBox[{"IntegerReverse", "[", 
                 RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
             "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "b"}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"finalRat", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"rat", "[", 
     RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
    RowBox[{"listRat", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
    RowBox[{"listRat2", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
    RowBox[{"countRat", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
    RowBox[{"ftrRat", "[", 
     RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ftrRat", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"FindTransientRepeat", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"FromDigits", "[", 
              RowBox[{"Sort", "[", 
               RowBox[{"IntegerDigits", "[", 
                RowBox[{
                 RowBox[{"IntegerReverse", "[", 
                  RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
              "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "2"}], 
        "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}], "=!=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"NestGraph", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"FromDigits", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"IntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}],
          ")"}], "&"}], ",", "i", ",", "m", ",", 
       RowBox[{"VertexLabels", "->", "\"\<Name\>\""}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", 
     "\"\<No repeating patten detected\>\""}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"reorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer", ",", 
    "v_Integer"}], "]"}], ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"PadLeft", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"FromDigits", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"Delete", "[", 
               RowBox[{
                RowBox[{"Prepend", "[", 
                 RowBox[{
                  RowBox[{"IntegerDigits", "[", 
                   RowBox[{"#", ",", "b"}], "]"}], ",", 
                  RowBox[{"Take", "[", 
                   RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
                RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
           "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "v"}], 
     "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listReorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], "]"}],
   ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FromDigits", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"Delete", "[", 
              RowBox[{
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"IntegerDigits", "[", 
                  RowBox[{"#", ",", "b"}], "]"}], ",", 
                 RowBox[{"Take", "[", 
                  RowBox[{
                   RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                   RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
          "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"listReorder2", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], "]"}],
   ":=", 
  RowBox[{"Pane", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"FromDigits", "/@", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FromDigits", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"Delete", "[", 
                 RowBox[{
                  RowBox[{"Prepend", "[", 
                   RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
                  RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
             "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "b"}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"270", ",", "255"}], "}"}], ",", 
    RowBox[{"Scrollbars", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"countReorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], "]"}],
   ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"FromDigits", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"Delete", "[", 
             RowBox[{
              RowBox[{"Prepend", "[", 
               RowBox[{
                RowBox[{"IntegerDigits", "[", 
                 RowBox[{"#", ",", "b"}], "]"}], ",", 
                RowBox[{"Take", "[", 
                 RowBox[{
                  RowBox[{"IntegerDigits", "[", 
                   RowBox[{"#", ",", "b"}], "]"}], ",", 
                  RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
              RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
         "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], "-", 
   "1"}]}], "\n", 
 RowBox[{
  RowBox[{"finalReorder", "[", 
   RowBox[{
   "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer", ",", 
    "v_Integer"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"reorder", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b", ",", "v"}], "]"}], ",", 
    RowBox[{"listReorder", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}], ",", 
    RowBox[{"listReorder2", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}], ",", 
    RowBox[{"countReorder", "[", 
     RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}]}], "}"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.676653260516526*^9, 3.6766532678877783`*^9}, {
   3.6767189481841288`*^9, 3.6767189725165663`*^9}, {3.6767232893356605`*^9, 
   3.676723298550408*^9}, 3.676723376492013*^9, {3.676723484577406*^9, 
   3.676723502898902*^9}, {3.6767235501345234`*^9, 3.6767235622074003`*^9}, 
   3.6767235972033367`*^9, {3.6767236337808065`*^9, 3.676723643551206*^9}, {
   3.6767236814075193`*^9, 3.676723685815905*^9}, {3.6767238290916967`*^9, 
   3.6767238621487455`*^9}, {3.6767238929520473`*^9, 
   3.6767239021793995`*^9}, {3.6767282664738555`*^9, 3.676728277410548*^9}, {
   3.6767318180600023`*^9, 3.6767318297564354`*^9}, {3.6767318603907537`*^9, 
   3.6767318644960675`*^9}, 3.6767318951644692`*^9, {3.676732845683501*^9, 
   3.6767328624937367`*^9}, {3.6767329185385056`*^9, 3.676732985285446*^9}, {
   3.6767333170288615`*^9, 3.6767333276877584`*^9}, {3.6767340182766857`*^9, 
   3.676734019949273*^9}, {3.676734948531687*^9, 3.676734990994917*^9}, {
   3.6767370308652196`*^9, 3.676737030986958*^9}, {3.6767371440549636`*^9, 
   3.6767372026286182`*^9}, {3.676737236486802*^9, 3.6767372733334055`*^9}, {
   3.6767375723193207`*^9, 3.6767376213374047`*^9}, {3.6767376588222485`*^9, 
   3.6767376594523306`*^9}, {3.6767377046689987`*^9, 
   3.6767377169193134`*^9}, {3.6767377519103537`*^9, 3.676737822400695*^9}, 
   3.676738459334199*^9},
 CellID->223664927]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"func", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"finalPalindrome", "[", 
        RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", " ", 
       RowBox[{"finalRepeat", "[", 
        RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
       RowBox[{"finalReorder", "[", 
        RowBox[{"i", ",", "m", ",", "r", ",", "b", ",", "v"}], "]"}], ",", 
       RowBox[{"finalRat", "[", 
        RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}]}], "}"}]}], ";", 
    RowBox[{"Pane", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "\[Equal]", "4"}], ",", 
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<visual representation in base \>\"", "<>", 
               RowBox[{"ToString", "[", "v", "]"}]}], ",", 
              "\"\<numbers after each iteration in base 10\>\"", ",", 
              RowBox[{"\"\<numbers after each iteration in base \>\"", "<>", 
               RowBox[{"ToString", "[", "b", "]"}]}], ",", 
              "\"\<number of iterations\>\"", ",", 
              "\"\<NestGraph (if there is a repeating pattern)\>\""}], "}"}], 
            ",", 
            RowBox[{"func", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"Frame", "\[Rule]", "All"}], ",", 
          RowBox[{"ItemSize", "\[Rule]", "Full"}]}], "]"}], ",", 
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<visual representation in base \>\"", "<>", 
               RowBox[{"ToString", "[", "v", "]"}]}], ",", 
              "\"\<numbers after each iteration in base 10\>\"", ",", 
              RowBox[{"\"\<numbers after each iteration in base \>\"", "<>", 
               RowBox[{"ToString", "[", "b", "]"}]}], ",", 
              "\"\<number of iterations\>\""}], "}"}], ",", 
            RowBox[{"func", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"Frame", "\[Rule]", "All"}], ",", 
          RowBox[{"ItemSize", "\[Rule]", "Full"}]}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"600", ",", "300"}], "}"}], ",", 
      RowBox[{"Scrollbars", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<Algorithms:\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "1", "\[Rule]", " ", "\"\<196-Algorithm Palindrome checker\>\""}], ",", 
       RowBox[{"2", "\[Rule]", " ", "\"\<196-Algorithm\>\""}], ",", 
       RowBox[{"3", "\[Rule]", " ", "\"\<Reorder-Algorithm\>\""}], ",", 
       RowBox[{"4", "\[Rule]", " ", "\"\<RATS sequence\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", " ", "SetterBar"}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "10", ",", "\"\<initial value in base 10\>\""}], 
      "}"}], ",", "10", ",", "100000", ",", "1", ",", " ", 
     RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "\"\<max number of iterations\>\""}], "}"}],
      ",", "1", ",", "500", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"r", ",", "1", ",", "\"\<number of digits reordered\>\""}], 
      "}"}], ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"i", ",", "b"}], "]"}], "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", "10", ",", "\"\<base to compute algorithm\>\""}], 
      "}"}], ",", " ", "2", ",", "10", ",", "1", ",", " ", 
     RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", ",", "2", ",", "\"\<base to represent iterations\>\""}], 
      "}"}], ",", " ", "2", ",", "10", ",", "1", ",", " ", 
     RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "None"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6767381722077265`*^9, 3.676738186273733*^9}, {
  3.6767394106970453`*^9, 3.676739413909688*^9}, {3.6767396034634066`*^9, 
  3.6767396088748393`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
This project presents two famous types of algorithms called the 196 algorithm \
and the RATS sequence. The 196-algorithm, also known as the reverse-and-add \
algorithm is the the process by which a number is taken, reversed and added \
to the original number. It is conjectured that all numbers in base ten which \
are iterated using this algorithm should end up in a palindrome. 196 is the \
lowest number in base ten which might not result in a palindrome. Numbers \
that do not end up by a palindrome using this algorithm are called Lychrel \
numbers. !96 is a possible Lychrel number. The RATS sequence adds an extra \
step to the 196 algorithm by reversing a number, adding it to the original \
umber and then sorting the digits in numerical order. Another iterative \
process in this demonstration is when the digits are reordered and then added \
to the original number. (i.e. the n last numbers are put to the front of the \
number and then added to the original number). The user can perform these \
algorithms with any number from 10-100,000 in any base 1-10 and can also \
represent them in any base 1-10.
The tabs at the top show the different algorithms. The palindrome checker \
will stop when it reaches a palindrome. The 196 algorithm, Reorder algorithm \
and the RATS sequence tabs will iterate as much as the user decides. The \
number of digits reordered slider only works for the reorder algorithm.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.676738233484656*^9, {3.676739479780341*^9, 3.6767394810563636`*^9}, {
   3.6767397013785505`*^9, 3.6767397207420897`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 2, $CellContext`i$$ = 
    11120, $CellContext`m$$ = 141, $CellContext`n$$ = 2, $CellContext`r$$ = 
    1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1, "Algorithms:"}, {
      1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
       "Reorder-Algorithm", 4 -> "RATS sequence"}}, {{
       Hold[$CellContext`i$$], 10, "initial value in base 10"}, 10, 100000, 
      1}, {{
       Hold[$CellContext`m$$], 1, "max number of iterations"}, 1, 500, 1}, {{
       Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
      Dynamic[
       Length[
        IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
       Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
       Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 1}},
     Typeset`size$$ = {600., {146., 154.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`n$9248$$ = False, $CellContext`i$9249$$ = 
    0, $CellContext`m$9250$$ = 0, $CellContext`r$9251$$ = 
    0, $CellContext`b$9252$$ = 0, $CellContext`v$9253$$ = 0}, 
    DynamicBox[ToBoxes[
      RawBoxes[
       Manipulate`ManipulateBoxes[
       1, StandardForm, 
        "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
          10, $CellContext`m$$ = 1, $CellContext`n$$ = 1, $CellContext`r$$ = 
          1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
          Hold[$CellContext`n$$, $CellContext`n$9248$$, False], 
          Hold[$CellContext`i$$, $CellContext`i$9249$$, 0], 
          Hold[$CellContext`m$$, $CellContext`m$9250$$, 0], 
          Hold[$CellContext`r$$, $CellContext`r$9251$$, 0], 
          Hold[$CellContext`b$$, $CellContext`b$9252$$, 0], 
          Hold[$CellContext`v$$, $CellContext`v$9253$$, 0]}, 
        "OtherVariables" :> {
         Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
          Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
          Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
          Typeset`initDone$$, Typeset`skipInitDone$$}, 
        "Body" :> ($CellContext`func = {
            $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
            $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
            $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
            $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Pane[
           If[$CellContext`n$$ == 4, 
            Grid[{{
               StringJoin["visual representation in base ", 
                ToString[$CellContext`v$$]], 
               "numbers after each iteration in base 10", 
               StringJoin["numbers after each iteration in base ", 
                ToString[$CellContext`b$$]], "number of iterations", 
               "NestGraph (if there is a repeating pattern)"}, 
              Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
             ItemSize -> Full], 
            Grid[{{
               StringJoin["visual representation in base ", 
                ToString[$CellContext`v$$]], 
               "numbers after each iteration in base 10", 
               StringJoin["numbers after each iteration in base ", 
                ToString[$CellContext`b$$]], "number of iterations"}, 
              Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
             ItemSize -> Full]], {600, 300}, Scrollbars -> {True, False}]), 
        "Specifications" :> {{{$CellContext`n$$, 1, "Algorithms:"}, {
           1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
            "Reorder-Algorithm", 4 -> "RATS sequence"}, ControlType -> 
           SetterBar}, 
          Delimiter, {{$CellContext`i$$, 10, "initial value in base 10"}, 10, 
           100000, 1, Appearance -> 
           "Labeled"}, {{$CellContext`m$$, 1, "max number of iterations"}, 1, 
           500, 1, Appearance -> 
           "Labeled"}, {{$CellContext`r$$, 1, "number of digits reordered"}, 
           1, 
           Dynamic[
            Length[
             IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, 
           Appearance -> 
           "Labeled"}, {{$CellContext`b$$, 10, "base to compute algorithm"}, 
           2, 10, 1, ControlType -> 
           PopupMenu}, {{$CellContext`v$$, 2, "base to represent iterations"},
            2, 10, 1, ControlType -> PopupMenu}}, 
        "Options" :> {FrameMargins -> None}, 
        "DefaultOptions" :> {ControllerLinking -> True}]], StandardForm],
     ImageSizeCache->{635., {260., 267.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`func = {{
          Graphics[
           
           Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 1,
             1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
            2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
          1}, {
          Graphics[
           
           Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 1,
             1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
            2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
          1}, {
          ArrayPlot[{{1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1}, 
            IntegerDigits[11649 + FromDigits[
               Flatten[{}, 1, 1, 6, 4, 9], 10], 2]}], 
          Pane[
           Column[{11649, 11649 + FromDigits[
               Flatten[{}, 1, 1, 6, 4, 9], 10]}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           Column[{11649, 
             FromDigits[
              IntegerDigits[11649 + FromDigits[
                 Flatten[{}, 1, 1, 6, 4, 9], 10], 10]]}], {270, 255}, 
           Scrollbars -> {False, True}], 1}, {
          Graphics[
           
           Raster[{{1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1}, {0, 1, 0, 0, 1,
             0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {14, 2}}, {0, 1}], Frame -> 
           Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 1,
           "No repeating patten detected"}}, $CellContext`finalPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
         $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`v]]], $CellContext`listPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestWhileList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
           IntegerDigits[
             IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
           IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]], {270, 
         255}, Scrollbars -> {False, True}], $CellContext`listPalindrome2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestWhileList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
             IntegerDigits[
               IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
             IntegerDigits[#, $CellContext`b]& , 
             1, $CellContext`m], $CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestWhileList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
           IntegerDigits[
             IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
           IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
        1, $CellContext`finalRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`listRepeat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[
          IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`finalReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`reorder[$CellContext`i, $CellContext`m, $CellContext`r, \
$CellContext`b, $CellContext`v], 
         $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], {
         270, 255}, Scrollbars -> {False, True}], $CellContext`listReorder2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestList[FromDigits[
               Flatten[
                Delete[
                 Prepend[
                  IntegerDigits[#, $CellContext`b], 
                  Take[
                   
                   IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
        1, $CellContext`finalRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRat[$CellContext`i, $CellContext`m, $CellContext`b], 
         $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          NestList[FromDigits[
            Sort[
             IntegerDigits[
             IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`listRat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Pane[
         Column[
          Map[FromDigits, 
           IntegerDigits[
            NestList[FromDigits[
              Sort[
               IntegerDigits[
               IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
         Scrollbars -> {False, True}], $CellContext`countRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
            Sort[
             IntegerDigits[
             
             IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`ftrRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := If[Part[
           FindTransientRepeat[
            NestList[FromDigits[
              Sort[
               IntegerDigits[
               IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], 2], 2] =!= {}, 
         NestGraph[FromDigits[
           Sort[
            IntegerDigits[
            IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m, VertexLabels -> "Name", ImageSize -> Full], 
         "No repeating patten detected"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.676739453589949*^9, 3.6767395770352535`*^9, 
  3.6767396099831705`*^9},
 CellID->158069434]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 RowBox[{
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`b$$ = 10, $CellContext`i$$ = 
     89, $CellContext`m$$ = 78, $CellContext`n$$ = 1, $CellContext`r$$ = 
     1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{{
        Hold[$CellContext`n$$], 1, "Algorithms:"}, {
       1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
        "Reorder-Algorithm", 4 -> "RATS sequence"}}, {{
        Hold[$CellContext`i$$], 10, "initial value in base 10"}, 10, 100000, 
       1}, {{
        Hold[$CellContext`m$$], 1, "max number of iterations"}, 1, 500, 1}, {{
        Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
       Dynamic[
        Length[
         IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
        Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
        Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 
       1}}, Typeset`size$$ = {600., {146., 154.}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = 
     False, $CellContext`n$9248$$ = False, $CellContext`i$9249$$ = 
     0, $CellContext`m$9250$$ = 0, $CellContext`r$9251$$ = 
     0, $CellContext`b$9252$$ = 0, $CellContext`v$9253$$ = 0}, 
     DynamicBox[ToBoxes[
       RawBoxes[
        Manipulate`ManipulateBoxes[
        1, StandardForm, 
         "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
           10, $CellContext`m$$ = 1, $CellContext`n$$ = 1, $CellContext`r$$ = 
           1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
           Hold[$CellContext`n$$, $CellContext`n$9248$$, False], 
           Hold[$CellContext`i$$, $CellContext`i$9249$$, 0], 
           Hold[$CellContext`m$$, $CellContext`m$9250$$, 0], 
           Hold[$CellContext`r$$, $CellContext`r$9251$$, 0], 
           Hold[$CellContext`b$$, $CellContext`b$9252$$, 0], 
           Hold[$CellContext`v$$, $CellContext`v$9253$$, 0]}, 
         "OtherVariables" :> {
          Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
           Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
           Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
           Typeset`initDone$$, Typeset`skipInitDone$$}, 
         "Body" :> ($CellContext`func = {
             $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Pane[
            If[$CellContext`n$$ == 4, 
             Grid[{{
                StringJoin["visual representation in base ", 
                 ToString[$CellContext`v$$]], 
                "numbers after each iteration in base 10", 
                StringJoin["numbers after each iteration in base ", 
                 ToString[$CellContext`b$$]], "number of iterations", 
                "NestGraph (if there is a repeating pattern)"}, 
               Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
              ItemSize -> Full], 
             Grid[{{
                StringJoin["visual representation in base ", 
                 ToString[$CellContext`v$$]], 
                "numbers after each iteration in base 10", 
                StringJoin["numbers after each iteration in base ", 
                 ToString[$CellContext`b$$]], "number of iterations"}, 
               Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
              ItemSize -> Full]], {600, 300}, Scrollbars -> {True, False}]), 
         "Specifications" :> {{{$CellContext`n$$, 1, "Algorithms:"}, {
            1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
             "Reorder-Algorithm", 4 -> "RATS sequence"}, ControlType -> 
            SetterBar}, 
           Delimiter, {{$CellContext`i$$, 10, "initial value in base 10"}, 10,
             100000, 1, Appearance -> 
            "Labeled"}, {{$CellContext`m$$, 1, "max number of iterations"}, 1,
             500, 1, Appearance -> 
            "Labeled"}, {{$CellContext`r$$, 1, "number of digits reordered"}, 
            1, 
            Dynamic[
             Length[
              IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, 
            Appearance -> 
            "Labeled"}, {{$CellContext`b$$, 10, "base to compute algorithm"}, 
            2, 10, 1, ControlType -> 
            PopupMenu}, {{$CellContext`v$$, 2, 
             "base to represent iterations"}, 2, 10, 1, ControlType -> 
            PopupMenu}}, "Options" :> {FrameMargins -> None}, 
         "DefaultOptions" :> {ControllerLinking -> True}]], StandardForm],
      ImageSizeCache->{635., {260., 267.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({$CellContext`func = {{
           Graphics[
            
            Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 
             1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
             2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}],
            1}, {
           Graphics[
            
            Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 
             1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
             2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}],
            1}, {
           ArrayPlot[{{1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1}, 
             IntegerDigits[11649 + FromDigits[
                Flatten[{}, 1, 1, 6, 4, 9], 10], 2]}], 
           Pane[
            Column[{11649, 11649 + FromDigits[
                Flatten[{}, 1, 1, 6, 4, 9], 10]}], {270, 255}, 
            Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 
              FromDigits[
               IntegerDigits[11649 + FromDigits[
                  Flatten[{}, 1, 1, 6, 4, 9], 10], 10]]}], {270, 255}, 
            Scrollbars -> {False, True}], 1}, {
           Graphics[
            
            Raster[{{1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1}, {0, 1, 0, 0, 
             1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {14, 2}}, {0, 1}], 
            Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 
           1, "No repeating patten detected"}}, $CellContext`finalPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
          $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestWhileList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
             IntegerDigits[
               IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
             IntegerDigits[#, $CellContext`b]& , 
             1, $CellContext`m], $CellContext`v]]], \
$CellContext`listPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]], {270, 
          255}, Scrollbars -> {False, True}], $CellContext`listPalindrome2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestWhileList[
             IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
              IntegerDigits[
                IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
              IntegerDigits[#, $CellContext`b]& , 
              1, $CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
         1, $CellContext`finalRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
          $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`repeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`listRepeat2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[
             IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`finalReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`reorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b, $CellContext`v], 
          $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
          $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
          $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[FromDigits[
               Flatten[
                Delete[
                 Prepend[
                  IntegerDigits[#, $CellContext`b], 
                  Take[
                   
                   IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], {
          270, 255}, Scrollbars -> {False, True}], $CellContext`listReorder2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[FromDigits[
                Flatten[
                 Delete[
                  Prepend[
                   IntegerDigits[#, $CellContext`b], 
                   Take[
                    
                    IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
         1, $CellContext`finalRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
          $CellContext`listRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[FromDigits[
              Sort[
               IntegerDigits[
               IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`listRat2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[FromDigits[
               Sort[
                IntegerDigits[
                IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`ftrRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := If[Part[
            FindTransientRepeat[
             NestList[FromDigits[
               Sort[
                IntegerDigits[
                IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], 2], 2] =!= {}, 
          NestGraph[FromDigits[
            Sort[
             IntegerDigits[
             IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m, VertexLabels -> "Name", ImageSize -> Full], 
          "No repeating patten detected"]}; Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]], 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`b$$ = 4, $CellContext`i$$ = 
     26198, $CellContext`m$$ = 42, $CellContext`n$$ = 3, $CellContext`r$$ = 
     1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{{
        Hold[$CellContext`n$$], 1, "Algorithms:"}, {
       1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
        "Reorder-Algorithm", 4 -> "RATS sequence"}}, {{
        Hold[$CellContext`i$$], 10, "initial value in base 10"}, 10, 100000, 
       1}, {{
        Hold[$CellContext`m$$], 1, "max number of iterations"}, 1, 500, 1}, {{
        Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
       Dynamic[
        Length[
         IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
        Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
        Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 
       1}}, Typeset`size$$ = {600., {146., 154.}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = 
     False, $CellContext`n$9248$$ = False, $CellContext`i$9249$$ = 
     0, $CellContext`m$9250$$ = 0, $CellContext`r$9251$$ = 
     0, $CellContext`b$9252$$ = 0, $CellContext`v$9253$$ = 0}, 
     DynamicBox[ToBoxes[
       RawBoxes[
        Manipulate`ManipulateBoxes[
        1, StandardForm, 
         "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
           10, $CellContext`m$$ = 1, $CellContext`n$$ = 1, $CellContext`r$$ = 
           1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
           Hold[$CellContext`n$$, $CellContext`n$9248$$, False], 
           Hold[$CellContext`i$$, $CellContext`i$9249$$, 0], 
           Hold[$CellContext`m$$, $CellContext`m$9250$$, 0], 
           Hold[$CellContext`r$$, $CellContext`r$9251$$, 0], 
           Hold[$CellContext`b$$, $CellContext`b$9252$$, 0], 
           Hold[$CellContext`v$$, $CellContext`v$9253$$, 0]}, 
         "OtherVariables" :> {
          Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
           Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
           Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
           Typeset`initDone$$, Typeset`skipInitDone$$}, 
         "Body" :> ($CellContext`func = {
             $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Pane[
            If[$CellContext`n$$ == 4, 
             Grid[{{
                StringJoin["visual representation in base ", 
                 ToString[$CellContext`v$$]], 
                "numbers after each iteration in base 10", 
                StringJoin["numbers after each iteration in base ", 
                 ToString[$CellContext`b$$]], "number of iterations", 
                "NestGraph (if there is a repeating pattern)"}, 
               Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
              ItemSize -> Full], 
             Grid[{{
                StringJoin["visual representation in base ", 
                 ToString[$CellContext`v$$]], 
                "numbers after each iteration in base 10", 
                StringJoin["numbers after each iteration in base ", 
                 ToString[$CellContext`b$$]], "number of iterations"}, 
               Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
              ItemSize -> Full]], {600, 300}, Scrollbars -> {True, False}]), 
         "Specifications" :> {{{$CellContext`n$$, 1, "Algorithms:"}, {
            1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
             "Reorder-Algorithm", 4 -> "RATS sequence"}, ControlType -> 
            SetterBar}, 
           Delimiter, {{$CellContext`i$$, 10, "initial value in base 10"}, 10,
             100000, 1, Appearance -> 
            "Labeled"}, {{$CellContext`m$$, 1, "max number of iterations"}, 1,
             500, 1, Appearance -> 
            "Labeled"}, {{$CellContext`r$$, 1, "number of digits reordered"}, 
            1, 
            Dynamic[
             Length[
              IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, 
            Appearance -> 
            "Labeled"}, {{$CellContext`b$$, 10, "base to compute algorithm"}, 
            2, 10, 1, ControlType -> 
            PopupMenu}, {{$CellContext`v$$, 2, 
             "base to represent iterations"}, 2, 10, 1, ControlType -> 
            PopupMenu}}, "Options" :> {FrameMargins -> None}, 
         "DefaultOptions" :> {ControllerLinking -> True}]], StandardForm],
      ImageSizeCache->{635., {260., 267.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({$CellContext`func = {{
           Graphics[
            
            Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 
             1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
             2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}],
            1}, {
           Graphics[
            
            Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 
             1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
             2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}],
            1}, {
           ArrayPlot[{{1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1}, 
             IntegerDigits[11649 + FromDigits[
                Flatten[{}, 1, 1, 6, 4, 9], 10], 2]}], 
           Pane[
            Column[{11649, 11649 + FromDigits[
                Flatten[{}, 1, 1, 6, 4, 9], 10]}], {270, 255}, 
            Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 
              FromDigits[
               IntegerDigits[11649 + FromDigits[
                  Flatten[{}, 1, 1, 6, 4, 9], 10], 10]]}], {270, 255}, 
            Scrollbars -> {False, True}], 1}, {
           Graphics[
            
            Raster[{{1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1}, {0, 1, 0, 0, 
             1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {14, 2}}, {0, 1}], 
            Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 
           1, "No repeating patten detected"}}, $CellContext`finalPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
          $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestWhileList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
             IntegerDigits[
               IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
             IntegerDigits[#, $CellContext`b]& , 
             1, $CellContext`m], $CellContext`v]]], \
$CellContext`listPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]], {270, 
          255}, Scrollbars -> {False, True}], $CellContext`listPalindrome2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestWhileList[
             IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
              IntegerDigits[
                IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
              IntegerDigits[#, $CellContext`b]& , 
              1, $CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
         1, $CellContext`finalRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
          $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`repeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`listRepeat2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[
             IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`finalReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`reorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b, $CellContext`v], 
          $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
          $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
          $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[FromDigits[
               Flatten[
                Delete[
                 Prepend[
                  IntegerDigits[#, $CellContext`b], 
                  Take[
                   
                   IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], {
          270, 255}, Scrollbars -> {False, True}], $CellContext`listReorder2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[FromDigits[
                Flatten[
                 Delete[
                  Prepend[
                   IntegerDigits[#, $CellContext`b], 
                   Take[
                    
                    IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
         1, $CellContext`finalRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
          $CellContext`listRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[FromDigits[
              Sort[
               IntegerDigits[
               IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`listRat2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[FromDigits[
               Sort[
                IntegerDigits[
                IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`ftrRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := If[Part[
            FindTransientRepeat[
             NestList[FromDigits[
               Sort[
                IntegerDigits[
                IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], 2], 2] =!= {}, 
          NestGraph[FromDigits[
            Sort[
             IntegerDigits[
             IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m, VertexLabels -> "Name", ImageSize -> Full], 
          "No repeating patten detected"]}; Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]], 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`b$$ = 10, $CellContext`i$$ = 
     15617, $CellContext`m$$ = 68, $CellContext`n$$ = 4, $CellContext`r$$ = 
     1, $CellContext`v$$ = 3, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{{
        Hold[$CellContext`n$$], 1, "Algorithms:"}, {
       1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
        "Reorder-Algorithm", 4 -> "RATS sequence"}}, {{
        Hold[$CellContext`i$$], 10, "initial value in base 10"}, 10, 100000, 
       1}, {{
        Hold[$CellContext`m$$], 1, "max number of iterations"}, 1, 500, 1}, {{
        Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
       Dynamic[
        Length[
         IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
        Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
        Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 
       1}}, Typeset`size$$ = {600., {146., 154.}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = 
     False, $CellContext`n$9248$$ = False, $CellContext`i$9249$$ = 
     0, $CellContext`m$9250$$ = 0, $CellContext`r$9251$$ = 
     0, $CellContext`b$9252$$ = 0, $CellContext`v$9253$$ = 0}, 
     DynamicBox[ToBoxes[
       RawBoxes[
        Manipulate`ManipulateBoxes[
        1, StandardForm, 
         "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
           10, $CellContext`m$$ = 1, $CellContext`n$$ = 1, $CellContext`r$$ = 
           1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
           Hold[$CellContext`n$$, $CellContext`n$9248$$, False], 
           Hold[$CellContext`i$$, $CellContext`i$9249$$, 0], 
           Hold[$CellContext`m$$, $CellContext`m$9250$$, 0], 
           Hold[$CellContext`r$$, $CellContext`r$9251$$, 0], 
           Hold[$CellContext`b$$, $CellContext`b$9252$$, 0], 
           Hold[$CellContext`v$$, $CellContext`v$9253$$, 0]}, 
         "OtherVariables" :> {
          Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
           Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
           Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
           Typeset`initDone$$, Typeset`skipInitDone$$}, 
         "Body" :> ($CellContext`func = {
             $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
             $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Pane[
            If[$CellContext`n$$ == 4, 
             Grid[{{
                StringJoin["visual representation in base ", 
                 ToString[$CellContext`v$$]], 
                "numbers after each iteration in base 10", 
                StringJoin["numbers after each iteration in base ", 
                 ToString[$CellContext`b$$]], "number of iterations", 
                "NestGraph (if there is a repeating pattern)"}, 
               Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
              ItemSize -> Full], 
             Grid[{{
                StringJoin["visual representation in base ", 
                 ToString[$CellContext`v$$]], 
                "numbers after each iteration in base 10", 
                StringJoin["numbers after each iteration in base ", 
                 ToString[$CellContext`b$$]], "number of iterations"}, 
               Part[$CellContext`func, $CellContext`n$$]}, Frame -> All, 
              ItemSize -> Full]], {600, 300}, Scrollbars -> {True, False}]), 
         "Specifications" :> {{{$CellContext`n$$, 1, "Algorithms:"}, {
            1 -> "196-Algorithm Palindrome checker", 2 -> "196-Algorithm", 3 -> 
             "Reorder-Algorithm", 4 -> "RATS sequence"}, ControlType -> 
            SetterBar}, 
           Delimiter, {{$CellContext`i$$, 10, "initial value in base 10"}, 10,
             100000, 1, Appearance -> 
            "Labeled"}, {{$CellContext`m$$, 1, "max number of iterations"}, 1,
             500, 1, Appearance -> 
            "Labeled"}, {{$CellContext`r$$, 1, "number of digits reordered"}, 
            1, 
            Dynamic[
             Length[
              IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, 
            Appearance -> 
            "Labeled"}, {{$CellContext`b$$, 10, "base to compute algorithm"}, 
            2, 10, 1, ControlType -> 
            PopupMenu}, {{$CellContext`v$$, 2, 
             "base to represent iterations"}, 2, 10, 1, ControlType -> 
            PopupMenu}}, "Options" :> {FrameMargins -> None}, 
         "DefaultOptions" :> {ControllerLinking -> True}]], StandardForm],
      ImageSizeCache->{635., {260., 267.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({$CellContext`func = {{
           Graphics[
            
            Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 
             1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
             2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}],
            1}, {
           Graphics[
            
            Raster[{{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, {1, 
             1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {17, 
             2}}, {0, 1}], Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 106260}], {270, 255}, Scrollbars -> {False, True}],
            1}, {
           ArrayPlot[{{1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1}, 
             IntegerDigits[11649 + FromDigits[
                Flatten[{}, 1, 1, 6, 4, 9], 10], 2]}], 
           Pane[
            Column[{11649, 11649 + FromDigits[
                Flatten[{}, 1, 1, 6, 4, 9], 10]}], {270, 255}, 
            Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 
              FromDigits[
               IntegerDigits[11649 + FromDigits[
                  Flatten[{}, 1, 1, 6, 4, 9], 10], 10]]}], {270, 255}, 
            Scrollbars -> {False, True}], 1}, {
           Graphics[
            
            Raster[{{1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1}, {0, 1, 0, 0, 
             1, 0, 0, 1, 1, 1, 1, 1, 1, 0}}, {{0, 0}, {14, 2}}, {0, 1}], 
            Frame -> Automatic, FrameLabel -> {None, None}, 
            FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
            Directive[
              GrayLevel[0.5, 0.4]], 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
              Automatic}], 
           Pane[
            Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 
           Pane[
            Column[{11649, 1266}], {270, 255}, Scrollbars -> {False, True}], 
           1, "No repeating patten detected"}}, $CellContext`finalPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
          $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestWhileList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
             IntegerDigits[
               IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
             IntegerDigits[#, $CellContext`b]& , 
             1, $CellContext`m], $CellContext`v]]], \
$CellContext`listPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]], {270, 
          255}, Scrollbars -> {False, True}], $CellContext`listPalindrome2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestWhileList[
             IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
              IntegerDigits[
                IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
              IntegerDigits[#, $CellContext`b]& , 
              1, $CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countPalindrome[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestWhileList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, 
            IntegerDigits[
              IntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
            IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
         1, $CellContext`finalRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
          $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`repeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[
            IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`listRepeat2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[
             IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countRepeat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[
           IntegerReverse[#, $CellContext`b] + #& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`finalReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`reorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b, $CellContext`v], 
          $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
          $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
          $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[FromDigits[
               Flatten[
                Delete[
                 Prepend[
                  IntegerDigits[#, $CellContext`b], 
                  Take[
                   
                   IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], {
          270, 255}, Scrollbars -> {False, True}], $CellContext`listReorder2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[FromDigits[
                Flatten[
                 Delete[
                  Prepend[
                   IntegerDigits[#, $CellContext`b], 
                   Take[
                    
                    IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countReorder[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`r, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
         1, $CellContext`finalRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := {
          $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
          $CellContext`listRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
          $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]], 
          Pattern[$CellContext`v, 
           Blank[Integer]]] := ArrayPlot[
          PadLeft[
           IntegerDigits[
            NestList[FromDigits[
              Sort[
               IntegerDigits[
               IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`v]]], $CellContext`listRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`listRat2[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Pane[
          Column[
           Map[FromDigits, 
            IntegerDigits[
             NestList[FromDigits[
               Sort[
                IntegerDigits[
                IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], $CellContext`b]]], {270, 255}, 
          Scrollbars -> {False, True}], $CellContext`countRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := Length[
           NestList[FromDigits[
             Sort[
              IntegerDigits[
              IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m]] - 1, $CellContext`ftrRat[
          Pattern[$CellContext`i, 
           Blank[Integer]], 
          Pattern[$CellContext`m, 
           Blank[Integer]], 
          Pattern[$CellContext`b, 
           Blank[Integer]]] := If[Part[
            FindTransientRepeat[
             NestList[FromDigits[
               Sort[
                IntegerDigits[
                IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m], 2], 2] =!= {}, 
          NestGraph[FromDigits[
            Sort[
             IntegerDigits[
             IntegerReverse[#, $CellContext`b] + #]]]& , $CellContext`i, \
$CellContext`m, VertexLabels -> "Name", ImageSize -> Full], 
          "No repeating patten detected"]}; Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]]}]], "Input",
 CellChangeTimes->{{3.676739821608192*^9, 3.676739821685253*^9}, 
   3.676739877963889*^9},
 CellID->248856057]
}, Open  ]],

Cell["", "DetailsSection"],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.676739145796068*^9},
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["Reverse and Add", "SearchTerms",
 CellChangeTimes->{{3.6767391549703693`*^9, 3.676739167427083*^9}},
 CellID->491233193],

Cell["RATS sequence", "SearchTerms",
 CellChangeTimes->{{3.6767391697592993`*^9, 3.6767392088452015`*^9}},
 CellID->536252785],

Cell["196-Algorithm", "SearchTerms",
 CellChangeTimes->{{3.6767391697592993`*^9, 3.6767392077928934`*^9}, {
  3.6767399589682617`*^9, 3.6767399589682617`*^9}},
 CellID->38449857],

Cell["Palindromic numbers", "SearchTerms",
 CellChangeTimes->{{3.6767391697592993`*^9, 3.6767392077928934`*^9}, {
  3.676739960727314*^9, 3.6767399640456553`*^9}},
 CellID->212989253]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["196-Algorithm",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/196-Algorithm.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/196-Algorithm.html"]], "RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.676740039608482*^9}, {
  3.6767401114563546`*^9, 3.6767401114563546`*^9}},
 CellID->261810773],

Cell[TextData[ButtonBox["Lychrel Number",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/LychrelNumber.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/LychrelNumber.html"]], "RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.676740050517826*^9}, {
  3.6767401282061043`*^9, 3.6767401282071247`*^9}},
 CellID->657775774],

Cell[TextData[ButtonBox["Palindromic Number Conjecture",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/PalindromicNumberConjecture.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/PalindromicNumberConjecture.html"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.6767400585735884`*^9}, {
  3.676740089283753*^9, 3.676740089283753*^9}, {3.676740167917853*^9, 
  3.676740167919852*^9}},
 CellID->504571886],

Cell[TextData[ButtonBox["RATS Sequence",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/RATSSequence.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/RATSSequence.html"]], "RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.6767400585735884`*^9}, {
   3.6767400903865814`*^9, 3.6767400935803347`*^9}, {3.676740189970602*^9, 
   3.676740189971103*^9}, 3.6767403437296715`*^9},
 CellID->110235343],

Cell[TextData[ButtonBox["196 Algorithm: Palindromic numbers",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/196AlgorithmPalindromicNumbers/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/196AlgorithmPalindromicNumbers/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767402863441296`*^9, 3.6767403123430166`*^9}},
 CellID->431484144],

Cell[TextData[ButtonBox["Reverse-Then-Add Sequences",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/ReverseThenAddSequences/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/ReverseThenAddSequences/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767403691975956`*^9, 3.676740408169938*^9}, {
  3.6767405374325514`*^9, 3.676740560331811*^9}},
 CellID->15223577],

Cell[TextData[ButtonBox["Reversal Addition related sequences",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/ReversalAdditionRelatedSystems/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/ReversalAdditionRelatedSystems/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767405628776474`*^9, 3.6767405883108907`*^9}},
 CellID->534575256],

Cell[TextData[ButtonBox["RATS Sequences",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/RATSSequences/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/RATSSequences/"]], "RelatedLinks",
 CellChangeTimes->{{3.6767405915723543`*^9, 3.6767405927571115`*^9}, {
  3.676740625853815*^9, 3.676740643112234*^9}},
 CellID->172696227]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell["Contributed by: Neel Gandhi (Mathematica Summer Camp 2016)", "Author",
 CellChangeTimes->{{3.67673992702921*^9, 3.6767399449991374`*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (June 18, 2016)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[111533, 2737, 353, 9, 22, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[111889, 2748, 678, 16, 22, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[112570, 2766, 340, 11, 22, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[112913, 2779, 637, 15, 22, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[113553, 2796, 844, 21, 22, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[114400, 2819, 369, 9, 22, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[114772, 2830, 1464, 31, 22, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[116239, 2863, 908, 21, 22, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 121740, 3021},
 {"RotateAndZoomIn3D", 121850, 3024},
 {"DragLocators", 121961, 3027},
 {"CreateAndDeleteLocators", 122078, 3030},
 {"SliderZoom", 122193, 3033},
 {"GamepadControls", 122300, 3036},
 {"AutomaticAnimation", 122414, 3039},
 {"BookmarkAnimation", 122532, 3042}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 120, 1, 74, "DemoTitle"],
Cell[CellGroupData[{
Cell[725, 27, 33, 0, 275, "InitializationSection"],
Cell[761, 29, 19009, 521, 654, "Input",
 InitializationCell->True,
 CellID->223664927]
}, Open  ]],
Cell[CellGroupData[{
Cell[19807, 555, 29, 0, 231, "ManipulateSection"],
Cell[19839, 557, 4744, 109, 206, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24620, 671, 36, 0, 169, "ManipulateCaptionSection"],
Cell[24659, 673, 1602, 23, 127, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26298, 701, 28, 0, 172, "ThumbnailSection"],
Cell[26329, 703, 20979, 505, 539, "Output",
 CellID->158069434]
}, Open  ]],
Cell[CellGroupData[{
Cell[47345, 1213, 28, 0, 142, "SnapshotsSection"],
Cell[47376, 1215, 64051, 1513, 1650, InheritFromParent,
 CellID->248856057]
}, Open  ]],
Cell[111442, 2731, 26, 0, 335, "DetailsSection"],
Cell[CellGroupData[{
Cell[111493, 2735, 37, 0, 114, "ControlSuggestionsSection"],
Cell[111533, 2737, 353, 9, 22, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[111889, 2748, 678, 16, 22, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[112570, 2766, 340, 11, 22, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[112913, 2779, 637, 15, 22, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[113553, 2796, 844, 21, 22, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[114400, 2819, 369, 9, 22, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[114772, 2830, 1464, 31, 22, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[116239, 2863, 908, 21, 22, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117184, 2889, 30, 0, 155, "SearchTermsSection"],
Cell[117217, 2891, 126, 2, 22, "SearchTerms",
 CellID->491233193],
Cell[117346, 2895, 126, 2, 22, "SearchTerms",
 CellID->536252785],
Cell[117475, 2899, 178, 3, 22, "SearchTerms",
 CellID->38449857],
Cell[117656, 2904, 183, 3, 22, "SearchTerms",
 CellID->212989253]
}, Open  ]],
Cell[CellGroupData[{
Cell[117876, 2912, 31, 0, 141, "RelatedLinksSection"],
Cell[117910, 2914, 372, 8, 22, "RelatedLinks",
 CellID->261810773],
Cell[118285, 2924, 373, 8, 22, "RelatedLinks",
 CellID->657775774],
Cell[118661, 2934, 465, 10, 22, "RelatedLinks",
 CellID->504571886],
Cell[119129, 2946, 447, 9, 22, "RelatedLinks",
 CellID->110235343],
Cell[119579, 2957, 384, 9, 22, "RelatedLinks",
 CellID->431484144],
Cell[119966, 2968, 406, 9, 22, "RelatedLinks",
 CellID->15223577],
Cell[120375, 2979, 385, 9, 22, "RelatedLinks",
 CellID->534575256],
Cell[120763, 2990, 373, 8, 22, "RelatedLinks",
 CellID->172696227]
}, Open  ]],
Cell[CellGroupData[{
Cell[121173, 3003, 25, 0, 141, "AuthorSection"],
Cell[121201, 3005, 143, 1, 22, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

