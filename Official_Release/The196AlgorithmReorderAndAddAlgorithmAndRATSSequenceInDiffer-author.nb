(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframCDFPlayer 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       163,          7]
NotebookDataLength[    225941,       5129]
NotebookOptionsPosition[    219143,       4914]
NotebookOutlinePosition[    220770,       4965]
CellTagsIndexPosition[    220434,       4953]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
The 196 Algorithm, Reorder-and-Add Algorithm, and RATS Sequence in Different \
Bases\
\>", "DemoTitle",
 CellChangeTimes->{
  3.6767381305078516`*^9, 3.676831908744397*^9, {3.676832379867807*^9, 
   3.676832391611699*^9}, {3.6768324635786877`*^9, 3.6768324834983053`*^9}}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myIntegerReverse", "[", "n_", "]"}], ":=", " ", 
   RowBox[{"FromDigits", "[", 
    RowBox[{"Reverse", "[", 
     RowBox[{"IntegerDigits", "[", "n", "]"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6768159617402587`*^9, 3.6768159694260993`*^9}},
 CellID->287686843],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myIntegerReverse", "[", 
    RowBox[{"n_", ",", "b_"}], "]"}], ":=", " ", 
   RowBox[{"FromDigits", "[", 
    RowBox[{
     RowBox[{"Reverse", "[", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"n", ",", "b"}], "]"}], "]"}], ",", "b"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6768157416797695`*^9, 3.6768157516348248`*^9}, {
  3.6768158291244307`*^9, 3.6768158552043805`*^9}, {3.6768159038722363`*^9, 
  3.676815929963011*^9}},
 CellID->362475690],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"rat", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{"PadLeft", "[", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"FromDigits", "[", 
            RowBox[{"Sort", "[", 
             RowBox[{"IntegerDigits", "[", 
              RowBox[{
               RowBox[{"myIntegerReverse", "[", 
                RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
            "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "v"}], 
      "]"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772521844288006`*^9},
 CellID->9772214],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"countRat", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"FromDigits", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"myIntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}],
          ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], "-", "1"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.677252193542434*^9},
 CellID->86864006],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listRat", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"FromDigits", "[", 
         RowBox[{"Sort", "[", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{
            RowBox[{"myIntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}], 
        ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6772522011780305`*^9, {3.6772523392903776`*^9, 3.677252341552436*^9}},
 CellID->350690481],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listRat2", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"FromDigits", " ", "/@", " ", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"FromDigits", "[", 
            RowBox[{"Sort", "[", 
             RowBox[{"IntegerDigits", "[", 
              RowBox[{
               RowBox[{"myIntegerReverse", "[", 
                RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
            "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "b"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6772522125059214`*^9, {3.6772523332822237`*^9, 3.677252335951892*^9}},
 CellID->561505936],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ftrRat", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"FindTransientRepeat", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"FromDigits", "[", 
              RowBox[{"Sort", "[", 
               RowBox[{"IntegerDigits", "[", 
                RowBox[{
                 RowBox[{"myIntegerReverse", "[", 
                  RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], 
              "]"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "2"}], 
        "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}], "=!=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"NestGraph", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"FromDigits", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"myIntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], "]"}], "]"}], "]"}],
          ")"}], "&"}], ",", "i", ",", "m", ",", 
       RowBox[{"VertexLabels", "->", "\"\<Name\>\""}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", 
     "\"\<No repeating patten detected\>\""}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772522319666204`*^9},
 CellID->309390949],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"reorder", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer", ",", 
     "v_Integer"}], "]"}], ":=", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{"PadLeft", "[", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"FromDigits", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Delete", "[", 
                RowBox[{
                 RowBox[{"Prepend", "[", 
                  RowBox[{
                   RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
                 RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
            "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "v"}], 
      "]"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.67725224750202*^9},
 CellID->19268389],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listReorder", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], 
    "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"FromDigits", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"Delete", "[", 
             RowBox[{
              RowBox[{"Prepend", "[", 
               RowBox[{
                RowBox[{"IntegerDigits", "[", 
                 RowBox[{"#", ",", "b"}], "]"}], ",", 
                RowBox[{"Take", "[", 
                 RowBox[{
                  RowBox[{"IntegerDigits", "[", 
                   RowBox[{"#", ",", "b"}], "]"}], ",", 
                  RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
              RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
         "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6772522556992307`*^9, {3.6772523520555053`*^9, 3.6772523546959734`*^9}},
 CellID->721501320],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listReorder2", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], 
    "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"FromDigits", "/@", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"FromDigits", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Delete", "[", 
                RowBox[{
                 RowBox[{"Prepend", "[", 
                  RowBox[{
                   RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                    RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
                 RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
            "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], ",", "b"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6772522630952215`*^9, {3.6772523596725006`*^9, 3.6772523623869705`*^9}},
 CellID->75767443],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"countReorder", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FromDigits", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"Delete", "[", 
              RowBox[{
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"IntegerDigits", "[", 
                  RowBox[{"#", ",", "b"}], "]"}], ",", 
                 RowBox[{"Take", "[", 
                  RowBox[{
                   RowBox[{"IntegerDigits", "[", 
                    RowBox[{"#", ",", "b"}], "]"}], ",", 
                   RowBox[{"-", "r"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"-", "r"}]}], "]"}], "]"}], ",", "b"}], "]"}], "+", 
          "#"}], ")"}], "&"}], ",", "i", ",", "m"}], "]"}], "]"}], "-", 
    "1"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772522708486204`*^9},
 CellID->702680340],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"repeat", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{"PadLeft", "[", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"myIntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
         "i", ",", "m"}], "]"}], ",", "v"}], "]"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772520636120987`*^9},
 CellID->184246286],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listRepeat", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"myIntegerReverse", "[", 
          RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i", 
      ",", "m"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.677252070245269*^9, {3.677252297144696*^9, 3.6772523011851997`*^9}},
 CellID->215291180],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listRepeat2", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"FromDigits", " ", "/@", " ", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"myIntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
         "i", ",", "m"}], "]"}], ",", "b"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6772520804383307`*^9, {3.677252303840268*^9, 3.677252305821519*^9}},
 CellID->628778034],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"countRepeat", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"NestList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"myIntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i",
        ",", "m"}], "]"}], "]"}], "-", "1"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.677252108000638*^9},
 CellID->6778985],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"countPalindrome", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"NestWhileList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"myIntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i",
        ",", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerDigits", "[", 
          RowBox[{
           RowBox[{"myIntegerReverse", "[", 
            RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
      "]"}], "]"}], "-", "1"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772521247106667`*^9},
 CellID->35421900],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listPalindrome", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"NestWhileList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"myIntegerReverse", "[", 
          RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", "i", 
      ",", 
      RowBox[{
       RowBox[{
        RowBox[{"IntegerDigits", "[", 
         RowBox[{
          RowBox[{"myIntegerReverse", "[", 
           RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
        RowBox[{"IntegerDigits", "[", 
         RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], "]"}],
     "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.677252134652122*^9, {3.6772523135125165`*^9, 3.6772523163517895`*^9}},
 CellID->92820877],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listPalindrome2", "[", 
    RowBox[{"i_Integer", ",", "m_Integer", ",", "b_Integer"}], "]"}], ":=", 
   RowBox[{"Column", "[", 
    RowBox[{"FromDigits", " ", "/@", " ", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestWhileList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"myIntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
         "i", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"myIntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
        "]"}], ",", "b"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.677252156231877*^9, {3.6772523208311043`*^9, 3.677252323953184*^9}},
 CellID->23610739],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"palindrome", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{"PadLeft", "[", 
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"NestWhileList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"myIntegerReverse", "[", 
             RowBox[{"#", ",", "b"}], "]"}], "+", "#"}], ")"}], "&"}], ",", 
         "i", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"IntegerDigits", "[", 
            RowBox[{
             RowBox[{"myIntegerReverse", "[", 
              RowBox[{"#", ",", "b"}], "]"}], ",", "b"}], "]"}], "=!=", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{"#", ",", "b"}], "]"}]}], "&"}], ",", "1", ",", "m"}], 
        "]"}], ",", "v"}], "]"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772521670479546`*^9},
 CellID->610029810],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"finalPalindrome", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"palindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listPalindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"listPalindrome2", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"countPalindrome", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772521749573574`*^9},
 CellID->827301962],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"finalRepeat", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"repeat", "[", 
      RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listRepeat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"listRepeat2", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"countRepeat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772521148024125`*^9},
 CellID->505938915],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"finalReorder", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "r_Integer", ",", "b_Integer", ",", 
     "v_Integer"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"reorder", "[", 
      RowBox[{"i", ",", "m", ",", "r", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listReorder", "[", 
      RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}], ",", 
     RowBox[{"listReorder2", "[", 
      RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}], ",", 
     RowBox[{"countReorder", "[", 
      RowBox[{"i", ",", "m", ",", "r", ",", "b"}], "]"}]}], "}"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.6772522779678044`*^9},
 CellID->5798319],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"finalRat", "[", 
    RowBox[{
    "i_Integer", ",", "m_Integer", ",", "b_Integer", ",", "v_Integer"}], 
    "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"rat", "[", 
      RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
     RowBox[{"listRat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"listRat2", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"countRat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}], ",", 
     RowBox[{"ftrRat", "[", 
      RowBox[{"i", ",", "m", ",", "b"}], "]"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellID->196490909]
}, Closed]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "func", "}"}], ",", 
     RowBox[{
      RowBox[{"func", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"finalPalindrome", "[", 
          RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", " ", 
         RowBox[{"finalRepeat", "[", 
          RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}], ",", 
         RowBox[{"finalReorder", "[", 
          RowBox[{"i", ",", "m", ",", "r", ",", "b", ",", "v"}], "]"}], ",", 
         RowBox[{"finalRat", "[", 
          RowBox[{"i", ",", "m", ",", "b", ",", "v"}], "]"}]}], "}"}]}], ";", 
      RowBox[{"Text", "@", 
       RowBox[{"Grid", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\"\<visual representation in base \>\"", "<>", 
              RowBox[{"ToString", "[", "v", "]"}]}], ",", 
             "\[IndentingNewLine]", "\"\<iterations\\nin base 10\>\"", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<iterations \\nin base \>\"", "<>", 
              RowBox[{"ToString", "[", "b", "]"}]}], ",", 
             "\[IndentingNewLine]", "\"\<number of \\niterations\>\"", ",", 
             "\[IndentingNewLine]", "\"\<graph\>\""}], "}"}], ",", 
           RowBox[{"func", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"Alignment", "\[Rule]", " ", "Top"}], ",", 
         RowBox[{"ItemSize", "\[Rule]", "Full"}], ",", 
         RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{"Control", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", "\"\<\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "1", "\[Rule]", " ", "\"\<196-algorithm palindrome checker\>\""}], 
          ",", 
          RowBox[{"2", "\[Rule]", " ", "\"\<196 algorithm\>\""}], ",", 
          RowBox[{"3", "\[Rule]", " ", "\"\<reorder-and-add algorithm\>\""}], 
          ",", 
          RowBox[{"4", "\[Rule]", " ", "\"\<RATS sequence\>\""}]}], "}"}], 
        ",", 
        RowBox[{"ControlType", "\[Rule]", " ", "SetterBar"}]}], "}"}]}], 
     "}"}], "]"}], ",", "\[IndentingNewLine]", "Delimiter", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "10", ",", "\"\<base 10 initial value\>\""}], 
          "}"}], ",", "10", ",", "100000", ",", "1", ",", " ", 
         RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", " ", "Tiny"}]}], "}"}]}], ",", 
      RowBox[{"Spacer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", ",", "1", ",", "\"\<iteration limit\>\""}], "}"}], ",",
          "1", ",", "500", ",", "1", ",", 
         RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}], ",", 
         RowBox[{"ImageSize", "\[Rule]", " ", "Tiny"}]}], "}"}]}]}], " ", 
     "}"}], "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"r", ",", "1", ",", "\"\<number of digits reordered\>\""}], 
      "}"}], ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"i", ",", "b"}], "]"}], "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
     RowBox[{"Enabled", "\[Rule]", 
      RowBox[{"n", "\[Equal]", "3"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", "  ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"b", ",", "10", ",", "\"\<base to compute algorithm\>\""}], 
          "}"}], ",", " ", "2", ",", "10", ",", "1", ",", " ", 
         RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}]}], ",", 
      RowBox[{"Spacer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "v", ",", "2", ",", "\"\<base to represent iterations\>\""}], "}"}],
          ",", " ", "2", ",", "10", ",", "1", ",", " ", 
         RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}]}]}], 
     " ", "}"}], "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"ContentSize", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"600", ",", " ", "380"}], "}"}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6767381722077265`*^9, 3.676738186273733*^9}, {
   3.6767394106970453`*^9, 3.676739413909688*^9}, {3.6767396034634066`*^9, 
   3.6767396088748393`*^9}, {3.676757489715713*^9, 3.6767574971533003`*^9}, {
   3.676757547016264*^9, 3.676757570310574*^9}, {3.676832523228368*^9, 
   3.6768326161699457`*^9}, {3.676833558885174*^9, 3.676833595108397*^9}, {
   3.677251601893594*^9, 3.677251783576939*^9}, {3.677251861744851*^9, 
   3.6772518663313985`*^9}, {3.6772519928760824`*^9, 
   3.6772519944673233`*^9}, {3.677252422972726*^9, 3.6772526946777115`*^9}, {
   3.6772527576327276`*^9, 3.6772527652195225`*^9}, 3.677252880476888*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 10, $CellContext`i$$ = 
    10, $CellContext`m$$ = 1, $CellContext`n$$ = 1, $CellContext`r$$ = 
    1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1, ""}, {
      1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
       "reorder-and-add algorithm", 4 -> "RATS sequence"}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`i$$], 10, "base 10 initial value"}, 10, 100000, 1}, {{
       Hold[$CellContext`m$$], 1, "iteration limit"}, 1, 500, 1}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Spacer[10], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
      Dynamic[
       Length[
        IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
       Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
       Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 1}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[10], 
         Manipulate`Place[5]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {404., {66., 71.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`n$54201$$ = False, $CellContext`i$54202$$ = 
    0, $CellContext`m$54203$$ = 0, $CellContext`r$54204$$ = 
    0, $CellContext`b$54205$$ = 0, $CellContext`v$54206$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
        10, $CellContext`m$$ = 1, $CellContext`n$$ = 1, $CellContext`r$$ = 
        1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$54201$$, False], 
        Hold[$CellContext`i$$, $CellContext`i$54202$$, 0], 
        Hold[$CellContext`m$$, $CellContext`m$54203$$, 0], 
        Hold[$CellContext`r$$, $CellContext`r$54204$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$54205$$, 0], 
        Hold[$CellContext`v$$, $CellContext`v$54206$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`func$}, $CellContext`func$ = {
           $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Text[
          Grid[{{
             StringJoin["visual representation in base ", 
              ToString[$CellContext`v$$]], "iterations\nin base 10", 
             StringJoin["iterations \nin base ", 
              ToString[$CellContext`b$$]], "number of \niterations", "graph"}, 
            Part[$CellContext`func$, $CellContext`n$$]}, Alignment -> Top, 
           ItemSize -> Full, Frame -> All]]], 
      "Specifications" :> {{{$CellContext`n$$, 1, ""}, {
         1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
          "reorder-and-add algorithm", 4 -> "RATS sequence"}, ControlType -> 
         SetterBar, ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], 
        Delimiter, {{$CellContext`i$$, 10, "base 10 initial value"}, 10, 
         100000, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 2}, {{$CellContext`m$$, 1, "iteration limit"}, 1,
          500, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Spacer[10], 
          Manipulate`Place[3]}], {{$CellContext`r$$, 1, 
          "number of digits reordered"}, 1, 
         Dynamic[
          Length[
           IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, Appearance -> 
         "Labeled", Enabled -> 
         Dynamic[$CellContext`n$$ == 3]}, {{$CellContext`b$$, 10, 
          "base to compute algorithm"}, 2, 10, 1, ControlType -> PopupMenu, 
         ControlPlacement -> 
         4}, {{$CellContext`v$$, 2, "base to represent iterations"}, 2, 10, 1,
          ControlType -> PopupMenu, ControlPlacement -> 5}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[10], 
          Manipulate`Place[5]}]}, "Options" :> {ContentSize -> {600, 380}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{614., {263., 269.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`func = {{
          Graphics[
           
           Raster[{{0, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 2, 
            0}, {2, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 2, 
            1}, {2, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 
            0}, {2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 
            1}, {2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 1, 0, 
            0}, {2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 0, 1, 
            1}, {2, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 
            0}, {2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 2, 1, 2, 
            1}, {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 1, 
            0}, {2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 2, 0, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 
            0}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 0, 1, 2, 
            0}}, {{0, 0}, {20, 13}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 12}, {
          Graphics[
           Raster[CompressedData["
1:eJylmF2S20AIhIGb5DCpvOcIe4G9/1tG9NfIXlu2rEzZKuuP6QG6Yfzr6/vv
V0XE7/X9s75ZUet8HSMztt+5Dlm5jb683d4eXKfZx/XUOqzf/VBtl7cr2RfX
1dpenDe3H/3p8+wbqRnXJ3uunnSdbBZLzzayxrDO1mjLG4qGUCnb/VIGr6VO
ZbkErb8Fzp7Ar8hQWy6mAkD1ZbD14ns1fVL4KIW7TzO1rM14T9YP7+iYo9eg
95JF2GUhf7KsvFmunNmLK03Ys2cweShg8mQUL/elSHDqXntG3uwbcqa829HH
fK+4Q4prg8xIw+iH207DIxD9U2vrWdoHQXbgyTLamBzQ9ApAKny6hxe0WoWe
qPT0fch0pEo/QuHNJJFuc2nmzORt8juLB2q3I/gp1zcyL8m5k6SY0qFhCjpo
quz9kHsjSHURwdkDNyKBBLgwmuIKPvCEPVEqXFppzDshtIlRD/yHJ0QUAdJT
oZCRVhXDeGXzLZ6ObO0SgS4oedopSgNxM/Fl1A0aWCHv6PnJwc56xIZsIHjy
/i0aRUiixO2ygg3ahJ0WAWhU93aEWeZw6egPtCFCipvSPO7RVLIasod8G6L6
J/EOYlv5A02ZCFqMOU1gxI2yvlqpfkQKPO0KK7PIjUqjdqSkuJJkwsMIT43L
JVt2hCRjaE4+PaARa0QAVZbadRZ9NicqJq6PZgrKhipSmtfIuSkeYs0w7yme
gsQVZddqdTg+pAgVZNEzM3vJc8kQ+5GOpIA6IXb1e8CD18IsCyt4uEbJf8T6
AA3JRYawjrDfHMuCWvksUsZjWYaAtjN1KKWRMQXiCI+F2lU1ZykSnGbrrZI9
9zPFwqU2pMOiq2pGprXnxRB6DvQ9MRGyFNUzTt3jycTPzkInikuJMB1HynjQ
Hyf8nsZ9hsOPIzV4CoIntS/Gw+HGpF5FynjKUa3JXYjuEMTLSIHH3WGZYOhp
ul7e16kjODX1FUKHG9DpRN5ECjzujnBQhmk6Wv0eDU2l0xYJmoqGRp8wQz7T
rFo1XaYlGqfMqGWf/gmnh/uPM5Ha8fTcyI/1HIKfQ1PIMR7Cx7Bevj473MhO
3akwJc5FCjwun+qfKAl47TyaKudbsUWZUng2UoNnX4+bFWXBJ2hcwKkZYQU7
xal7POxAvDcx/z9D40rl7Y3UNd6q3+MIv6ZGiy3ap2iUt2anGsvXdeoQT3on
XEOpz9G4KEHR+ohTd3B2azR0H0cKIMNNS+kVM3ZwhLdgl9B4i0IfXSfq1IGd
mI3qce93YsxOgKBfNOMeYLqdi4PGp/xXwuVB2CnJl4f/F6rrkRo82jldjpTx
FP9D/I8Zb9HX5x/9SBz+
            "], {{0, 0}, {71, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJydl9GZ20AIhBk6SS9JAynhGrj+36JlfpDOkW3Je5/tk7wGdhgG9Ovr++9X
RsSf7fV7e0naXqnc1vYRvrX9s23K7btYX21b1t92pbq9XbB/mWJrZv1Otda3
db+Wr7dXGdD6DP9+mazfrKvtXqw/ldNyVDGozJflUPlL1S8j2Fl7op2qTrLc
5fJmAw6mfC0Lddv+sk60BylHWvcTjzZmOMLBEEQDNxsVO5SNJkZtDZjKupLT
GYsFj28WbgVOnTOF7aiwvbuwMp4gF3YT9m4bBQlHCB/Qxy/LvpIBqJ2OyIDa
XHZ2w57VABQC9e4DH5LGqUmrjQTwFbDFDjKXncqJsw5SEcwHywBAvjqrQyYG
Z9ikTYAzyoqxgYkc12ZDDO/MC5Jgb073HoepJdk9GVADEka0ckdq06h0XhpY
GDBQOb/h2FyC5UHZ76nJS4JEV4aMqcll/ihdKH53RTuqYxyunGE5fnNXAZBE
C9KEVSp/GoHbCbcQDJdSDCmdfRtL/YxjMuxCyaY+pe2TiuIE4IiHOBATiCnD
OSoRcA9+qMs1HwMxDQsupzcNMmDnVFS2nD3GgZFguwi72D37FaOPzepHWEeo
snns4OpgTneLImj/vyYrFl3Eu6lqGYV6p3mx2xbo0VC5Zip6jTAD6VkcCYeL
G12IlSqRe0owD5JwYiRMI+8TyjnoWhcFjc7jSCRDXSHZsqxWMOhCp3hmxH2N
5hGmmRUSDmUg4M9sIHTWPZM8bW4qflfnp8uUpufZ0h4fciulnuTFgeA9uluQ
3xZRE+R5XhpXxCyyOy/yqlYXdbt6dRo4ru6aTAtBi6f5vYykGyG5pNFN+3KN
v7SR9Gjra/ewdL8+Fs+bSMwONyeTbTK1k/+dkcMJWgEpeGrzXRyZ3RSZYuhX
LhcX8Ns41qK5AaTatXvdi3r5aaOnKnObSooeKa/YyB5WEJNdTnQlLyx6g3qe
6dnD+nDRhhgGwCD2We5SXhz+3isiuytb1a7lpWUtmeMVB2qc9Zenp6FCRgEZ
S67mxVYYI5kaDM4I3NVIevSEqKluIbcCIQJPZmj91bwQCGBaFZmSzvr+KyNT
aPRP9dPKjYV+RvNiBu47gcQktdG4l5fkiYlxLLuGb+UFIzM3B2J7Lw4PBOSH
2r+Zl4rET6cMr6GrOvZgpMcqT7l38+LVD7/I4828YEM0/x6AP7HBMBNHkb+7
epQSj2if2OjHBdTjozjg2T5mfmoEIfwwL2upJ8vr/eUskr1lfmyjn0I/zQuR
CGX7B6itHHI=
            "], {{0, 0}, {68, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{
            15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 15467728,
              97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 
             15467728, 97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJyNVut5xCAMs7xJF+gWXaAj3ALd/19BkrnkkgD0S9sQ4YeQDV+vv99XRsRP
e77bg/bDX4hE9icTbUQG2kv7p73on7aMkDaTHdUevYATRvYp2UWfy26n4/p7
f2t/+2cZAJ33ePq3pCO5SVqXP67iQk8YwDCZAOchz+kFckpwZAXMYHtmPUD5
Dc4x2KATOU+mregZO01znd5sR7Z7tN0RaQyFm7aFkayIcjChZNMZYjApqyBt
Y4S4ZQR8E4v0o5nEGw0nOzJMBcdl5BUH2/5KVhkV7UXtpLjNo3UnXF8ZlsRg
S6dBYqO484Y4cXk7DW5h2PoIKyvZDzQJkTTsWbKA8vxEpySRYYvv8FkCl4Ga
htRNJ1wVV9siUiKripKM8pOTsg4JB9otlUdV2BUeQ2QpJjNcIbdwiTtdDkX9
vW1tYYTLn0G5gp+sqzlI5JQVbjmpVF1KLkaF8wwfzQFVTM+2WWMCiZ7IJ06G
dSncRfLIScFVDqPTTdE07Q6Dz9q5hdcu5ZyTglf3e9TJOXjkoc+s4erOwIIT
x8I2ONWJe52rTKU85QTiGagGseDE+40xZmB3EUeVN/3khLakZDZWnISKSG0U
K50cRJgR9/3kZB0ui1RbnA9VjBSyoRMx7g6xo0EZjSUnisVEB5a1Q3yoB645
YSxw29qonRzH21onalJqbXNOxtXA7W3BSYhina86rnbgbqBzTnxGFeUrncDX
Bx2ga52Ebx++by3Qh852exZf4IfOtqHB8MkTGz32IPB17WTtpu+tO/Coe+IG
mkiMfNfw1PZv2fbVb6923LCud7YHMHxr24y7dPIPw3kVKQ==
            "], {{0, 0}, {46, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 68, 
          "No repeating patten detected"}}, $CellContext`finalPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
         $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`v]]], \
$CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]]] := FromDigits[
         Reverse[
          IntegerDigits[$CellContext`n]]], $CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := FromDigits[
         Reverse[
          
          IntegerDigits[$CellContext`n, $CellContext`b]], $CellContext`b], \
$CellContext`listPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
            $CellContext`myIntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
          IntegerDigits[#, $CellContext`b]& , 
          1, $CellContext`m]], $CellContext`listPalindrome2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`b]]], \
$CellContext`countPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
             $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
        1, $CellContext`finalRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`IntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], 
       TagSet[$CellContext`IntegerReverse, 
        MessageName[$CellContext`IntegerReverse, "shdw"], 
        "Symbol `1` appears in multiple contexts `2`; definitions in context \
`3` may shadow or be shadowed by other definitions."], $CellContext`listRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]], $CellContext`listRepeat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`b]]], $CellContext`countRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]] - 1, $CellContext`finalReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`reorder[$CellContext`i, $CellContext`m, $CellContext`r, \
$CellContext`b, $CellContext`v], 
         $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
            Flatten[
             Delete[
              Prepend[
               IntegerDigits[#, $CellContext`b], 
               Take[
                
                IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], \
$CellContext`listReorder2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], $CellContext`countReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
        1, $CellContext`finalRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRat[$CellContext`i, $CellContext`m, $CellContext`b], 
         $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`v]]], \
$CellContext`listRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]], $CellContext`listRat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`b]]], \
$CellContext`countRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
            Sort[
             
             IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]] - 1, $CellContext`ftrRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := If[Part[
           $CellContext`FindTransientRepeat[
            NestList[FromDigits[
              Sort[
               
               IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], 2], 2] =!= {}, 
         NestGraph[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m, VertexLabels -> "Name", ImageSize -> 
          Full], "No repeating patten detected"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.677341626481648*^9},
 CellID->1291931999]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
This Demonstration presents two well-known algorithms, the 196 algorithm and \
the RATS sequence (reverse, add to the original, then sort the digits), and a \
variation, the reorder-and-add algorithm.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.676738233484656*^9, {3.676739479780341*^9, 3.6767394810563636`*^9}, {
   3.6767397013785505`*^9, 3.6767397207420897`*^9}, {3.676757889389271*^9, 
   3.676757893590199*^9}, {3.67681633313892*^9, 3.67681633313892*^9}, {
   3.676832160906567*^9, 3.676832179695735*^9}, {3.67683229625424*^9, 
   3.676832296990264*^9}, {3.6768326474242363`*^9, 3.676832698842297*^9}, {
   3.6773416450238953`*^9, 3.677341649469988*^9}, {3.677341879072906*^9, 
   3.677341910263036*^9}}],

Cell[TextData[{
 "The 196 algorithm (or the reverse-and-add algorithm) reverses the digits of \
a number and adds that to the original number. For example, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"125", "\[LongRightArrow]", "125"}], "+", "521"}], "=", "646"}], 
   TraditionalForm]], "InlineMath"],
 ". It is conjectured that all numbers in base ten that are iterated using \
this algorithm end up in a palindrome (a number that reads the same from \
either direction). 196 is the smallest number in base ten that might not \
result in a palindrome: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"196", "\[LongRightArrow]", "196"}], "+", "691"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"887", "\[LongRightArrow]", "887"}], "+", "788"}], "=", 
     RowBox[{"887", "+", 
      RowBox[{"788", "\[LongRightArrow]", "\[Ellipsis]"}]}]}]}], 
   TraditionalForm]], "InlineMath"],
 ". Numbers that do not end up in a palindrome are called Lychrel numbers."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.676738233484656*^9, {3.676739479780341*^9, 3.6767394810563636`*^9}, {
   3.6767397013785505`*^9, 3.6767397207420897`*^9}, {3.676757889389271*^9, 
   3.676757893590199*^9}, {3.67681633313892*^9, 3.67681633313892*^9}, {
   3.676832160906567*^9, 3.676832179695735*^9}, {3.67683229625424*^9, 
   3.676832296990264*^9}, {3.6768326474242363`*^9, 3.676832920089468*^9}, {
   3.676833014647419*^9, 3.676833028175301*^9}, {3.677339561850678*^9, 
   3.677339593640009*^9}, {3.677339634804916*^9, 3.677339635518503*^9}, 
   3.677347064577566*^9},
 CellID->1761356122],

Cell[TextData[{
 "The reorder-and-add algorithm reorders the original number by a certain \
number ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]], "InlineMath"],
 " and adds it back. For example, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "2"}], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"14289", "\[LongRightArrow]", "14289"}], "+", "89142"}], "=", 
    RowBox[{
     RowBox[{"103431", "\[LongRightArrow]"}], "..."}]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.676738233484656*^9, {3.676739479780341*^9, 3.6767394810563636`*^9}, {
   3.6767397013785505`*^9, 3.6767397207420897`*^9}, {3.676757889389271*^9, 
   3.676757893590199*^9}, {3.67681633313892*^9, 3.67681633313892*^9}, 
   3.676832160906567*^9, {3.676832196129655*^9, 3.676832233067359*^9}, {
   3.6768331780688887`*^9, 3.676833454606246*^9}, {3.677347069729342*^9, 
   3.6773470700256042`*^9}},
 CellID->2121832977],

Cell[TextData[{
 "The RATS sequence adds an extra step to the 196 algorithm. As before, \
reverse the number and add it to the original number, but then sort the \
digits. For example (where \"\[LongRightArrow]\" means reverse and add and \"\
\[DoubleLongRightArrow]\" means sort), ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"125", "\[LongRightArrow]", "125"}], "+", "521"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
      "646", "\[DoubleLongRightArrow]", "466", "\[LongRightArrow]", "466"}], 
      "+", "664"}], "=", 
     RowBox[{
      RowBox[{"1130", "\[DoubleLongRightArrow]", "0113"}], "=", 
      RowBox[{"113", "\[LongRightArrow]", "\[Ellipsis]"}]}]}]}], 
   TraditionalForm]], "InlineMath"],
 "."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.676738233484656*^9, {3.676739479780341*^9, 3.6767394810563636`*^9}, {
   3.6767397013785505`*^9, 3.6767397207420897`*^9}, {3.676757889389271*^9, 
   3.676757893590199*^9}, {3.67681633313892*^9, 3.67681633313892*^9}, 
   3.676832160906567*^9, {3.676832196129655*^9, 3.67683219613386*^9}, {
   3.676832951656672*^9, 3.676833006031131*^9}, {3.67683303727851*^9, 
   3.676833134108589*^9}, {3.67683363449107*^9, 3.6768337474829884`*^9}},
 CellID->265929673],

Cell["\<\
You can perform these algorithms with any number from 10 to 100,000 in any \
base from 1 to 10, and you can also represent the numbers in any base from 1 \
to 10.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.676738233484656*^9, {3.676739479780341*^9, 3.6767394810563636`*^9}, {
   3.6767397013785505`*^9, 3.6767397207420897`*^9}, {3.676757889389271*^9, 
   3.676757893590199*^9}, {3.67681633313892*^9, 3.67681633313892*^9}, 
   3.676832160906567*^9, {3.676832196129655*^9, 3.676832239847406*^9}, {
   3.676833460261779*^9, 3.676833490588955*^9}, 3.677347416515422*^9},
 CellID->360840910],

Cell["\<\
The tabs at the top show the three different algorithms. The palindrome \
checker stops when it reaches a palindrome. You decide how much to iterate \
the 196 algorithm, the reorder-and-add algorithm, and the RATS sequence. The \
\"number of digits reordered slider\" only works for the reorder algorithm.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.676738233484656*^9, {3.676739479780341*^9, 3.6767394810563636`*^9}, {
   3.6767397013785505`*^9, 3.6767397207420897`*^9}, {3.676757889389271*^9, 
   3.676757893590199*^9}, {3.67681633313892*^9, 3.676816334355774*^9}, {
   3.6768322496710463`*^9, 3.67683227103903*^9}, {3.676833496300962*^9, 
   3.676833497133173*^9}, {3.676833528044663*^9, 3.676833548003633*^9}, {
   3.677339719348102*^9, 3.677339802672966*^9}},
 CellID->89552016]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 2, $CellContext`i$$ = 
    11120, $CellContext`m$$ = 141, $CellContext`n$$ = 2, $CellContext`r$$ = 
    1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 2, ""}, {
      1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
       "reorder-and-add algorithm", 4 -> "RATS sequence"}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`i$$], 11120, "base 10 initial value"}, 10, 100000, 
      1}, {{
       Hold[$CellContext`m$$], 141, "iteration limit"}, 1, 500, 1}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Spacer[10], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
      Dynamic[
       Length[
        IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
       Hold[$CellContext`b$$], 2, "base to compute algorithm"}, 2, 10, 1}, {{
       Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 1}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[10], 
         Manipulate`Place[5]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {1256., {1860., 1868.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`n$12100$$ = False, $CellContext`i$12101$$ = 
    0, $CellContext`m$12102$$ = 0, $CellContext`r$12103$$ = 
    0, $CellContext`b$12104$$ = 0, $CellContext`v$12105$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`b$$ = 2, $CellContext`i$$ = 
        11120, $CellContext`m$$ = 141, $CellContext`n$$ = 2, $CellContext`r$$ = 
        1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$12100$$, False], 
        Hold[$CellContext`i$$, $CellContext`i$12101$$, 0], 
        Hold[$CellContext`m$$, $CellContext`m$12102$$, 0], 
        Hold[$CellContext`r$$, $CellContext`r$12103$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$12104$$, 0], 
        Hold[$CellContext`v$$, $CellContext`v$12105$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`func$}, $CellContext`func$ = {
           $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Text[
          Grid[{{
             StringJoin["visual representation in base ", 
              ToString[$CellContext`v$$]], "iterations\nin base 10", 
             StringJoin["iterations \nin base ", 
              ToString[$CellContext`b$$]], "number of \niterations", "graph"}, 
            Part[$CellContext`func$, $CellContext`n$$]}, Alignment -> Top, 
           ItemSize -> Full, Frame -> All]]], 
      "Specifications" :> {{{$CellContext`n$$, 2, ""}, {
         1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
          "reorder-and-add algorithm", 4 -> "RATS sequence"}, ControlType -> 
         SetterBar, ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], 
        Delimiter, {{$CellContext`i$$, 11120, "base 10 initial value"}, 10, 
         100000, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 2}, {{$CellContext`m$$, 141, "iteration limit"}, 
         1, 500, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Spacer[10], 
          Manipulate`Place[3]}], {{$CellContext`r$$, 1, 
          "number of digits reordered"}, 1, 
         Dynamic[
          Length[
           IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, Appearance -> 
         "Labeled", Enabled -> 
         Dynamic[$CellContext`n$$ == 3]}, {{$CellContext`b$$, 2, 
          "base to compute algorithm"}, 2, 10, 1, ControlType -> PopupMenu, 
         ControlPlacement -> 
         4}, {{$CellContext`v$$, 2, "base to represent iterations"}, 2, 10, 1,
          ControlType -> PopupMenu, ControlPlacement -> 5}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[10], 
          Manipulate`Place[5]}]}, "Options" :> {ContentSize -> {600, 380}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{766., {323., 329.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`func = {{
          Graphics[
           
           Raster[{{0, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 2, 
            0}, {2, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 2, 
            1}, {2, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 
            0}, {2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 
            1}, {2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 1, 0, 
            0}, {2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 0, 1, 
            1}, {2, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 
            0}, {2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 2, 1, 2, 
            1}, {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 1, 
            0}, {2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 2, 0, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 
            0}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 0, 1, 2, 
            0}}, {{0, 0}, {20, 13}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 12}, {
          Graphics[
           Raster[CompressedData["
1:eJylmF2S20AIhIGb5DCpvOcIe4G9/1tG9NfIXlu2rEzZKuuP6QG6Yfzr6/vv
V0XE7/X9s75ZUet8HSMztt+5Dlm5jb683d4eXKfZx/XUOqzf/VBtl7cr2RfX
1dpenDe3H/3p8+wbqRnXJ3uunnSdbBZLzzayxrDO1mjLG4qGUCnb/VIGr6VO
ZbkErb8Fzp7Ar8hQWy6mAkD1ZbD14ns1fVL4KIW7TzO1rM14T9YP7+iYo9eg
95JF2GUhf7KsvFmunNmLK03Ys2cweShg8mQUL/elSHDqXntG3uwbcqa829HH
fK+4Q4prg8xIw+iH207DIxD9U2vrWdoHQXbgyTLamBzQ9ApAKny6hxe0WoWe
qPT0fch0pEo/QuHNJJFuc2nmzORt8juLB2q3I/gp1zcyL8m5k6SY0qFhCjpo
quz9kHsjSHURwdkDNyKBBLgwmuIKPvCEPVEqXFppzDshtIlRD/yHJ0QUAdJT
oZCRVhXDeGXzLZ6ObO0SgS4oedopSgNxM/Fl1A0aWCHv6PnJwc56xIZsIHjy
/i0aRUiixO2ygg3ahJ0WAWhU93aEWeZw6egPtCFCipvSPO7RVLIasod8G6L6
J/EOYlv5A02ZCFqMOU1gxI2yvlqpfkQKPO0KK7PIjUqjdqSkuJJkwsMIT43L
JVt2hCRjaE4+PaARa0QAVZbadRZ9NicqJq6PZgrKhipSmtfIuSkeYs0w7yme
gsQVZddqdTg+pAgVZNEzM3vJc8kQ+5GOpIA6IXb1e8CD18IsCyt4uEbJf8T6
AA3JRYawjrDfHMuCWvksUsZjWYaAtjN1KKWRMQXiCI+F2lU1ZykSnGbrrZI9
9zPFwqU2pMOiq2pGprXnxRB6DvQ9MRGyFNUzTt3jycTPzkInikuJMB1HynjQ
Hyf8nsZ9hsOPIzV4CoIntS/Gw+HGpF5FynjKUa3JXYjuEMTLSIHH3WGZYOhp
ul7e16kjODX1FUKHG9DpRN5ECjzujnBQhmk6Wv0eDU2l0xYJmoqGRp8wQz7T
rFo1XaYlGqfMqGWf/gmnh/uPM5Ha8fTcyI/1HIKfQ1PIMR7Cx7Bevj473MhO
3akwJc5FCjwun+qfKAl47TyaKudbsUWZUng2UoNnX4+bFWXBJ2hcwKkZYQU7
xal7POxAvDcx/z9D40rl7Y3UNd6q3+MIv6ZGiy3ap2iUt2anGsvXdeoQT3on
XEOpz9G4KEHR+ohTd3B2azR0H0cKIMNNS+kVM3ZwhLdgl9B4i0IfXSfq1IGd
mI3qce93YsxOgKBfNOMeYLqdi4PGp/xXwuVB2CnJl4f/F6rrkRo82jldjpTx
FP9D/I8Zb9HX5x/9SBz+
            "], {{0, 0}, {71, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJydl9GZ20AIhBk6SS9JAynhGrj+36JlfpDOkW3Je5/tk7wGdhgG9Ovr++9X
RsSf7fV7e0naXqnc1vYRvrX9s23K7btYX21b1t92pbq9XbB/mWJrZv1Otda3
db+Wr7dXGdD6DP9+mazfrKvtXqw/ldNyVDGozJflUPlL1S8j2Fl7op2qTrLc
5fJmAw6mfC0Lddv+sk60BylHWvcTjzZmOMLBEEQDNxsVO5SNJkZtDZjKupLT
GYsFj28WbgVOnTOF7aiwvbuwMp4gF3YT9m4bBQlHCB/Qxy/LvpIBqJ2OyIDa
XHZ2w57VABQC9e4DH5LGqUmrjQTwFbDFDjKXncqJsw5SEcwHywBAvjqrQyYG
Z9ikTYAzyoqxgYkc12ZDDO/MC5Jgb073HoepJdk9GVADEka0ckdq06h0XhpY
GDBQOb/h2FyC5UHZ76nJS4JEV4aMqcll/ihdKH53RTuqYxyunGE5fnNXAZBE
C9KEVSp/GoHbCbcQDJdSDCmdfRtL/YxjMuxCyaY+pe2TiuIE4IiHOBATiCnD
OSoRcA9+qMs1HwMxDQsupzcNMmDnVFS2nD3GgZFguwi72D37FaOPzepHWEeo
snns4OpgTneLImj/vyYrFl3Eu6lqGYV6p3mx2xbo0VC5Zip6jTAD6VkcCYeL
G12IlSqRe0owD5JwYiRMI+8TyjnoWhcFjc7jSCRDXSHZsqxWMOhCp3hmxH2N
5hGmmRUSDmUg4M9sIHTWPZM8bW4qflfnp8uUpufZ0h4fciulnuTFgeA9uluQ
3xZRE+R5XhpXxCyyOy/yqlYXdbt6dRo4ru6aTAtBi6f5vYykGyG5pNFN+3KN
v7SR9Gjra/ewdL8+Fs+bSMwONyeTbTK1k/+dkcMJWgEpeGrzXRyZ3RSZYuhX
LhcX8Ns41qK5AaTatXvdi3r5aaOnKnObSooeKa/YyB5WEJNdTnQlLyx6g3qe
6dnD+nDRhhgGwCD2We5SXhz+3isiuytb1a7lpWUtmeMVB2qc9Zenp6FCRgEZ
S67mxVYYI5kaDM4I3NVIevSEqKluIbcCIQJPZmj91bwQCGBaFZmSzvr+KyNT
aPRP9dPKjYV+RvNiBu47gcQktdG4l5fkiYlxLLuGb+UFIzM3B2J7Lw4PBOSH
2r+Zl4rET6cMr6GrOvZgpMcqT7l38+LVD7/I4828YEM0/x6AP7HBMBNHkb+7
epQSj2if2OjHBdTjozjg2T5mfmoEIfwwL2upJ8vr/eUskr1lfmyjn0I/zQuR
CGX7B6itHHI=
            "], {{0, 0}, {68, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{
            15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 15467728,
              97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 
             15467728, 97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJyNVut5xCAMs7xJF+gWXaAj3ALd/19BkrnkkgD0S9sQ4YeQDV+vv99XRsRP
e77bg/bDX4hE9icTbUQG2kv7p73on7aMkDaTHdUevYATRvYp2UWfy26n4/p7
f2t/+2cZAJ33ePq3pCO5SVqXP67iQk8YwDCZAOchz+kFckpwZAXMYHtmPUD5
Dc4x2KATOU+mregZO01znd5sR7Z7tN0RaQyFm7aFkayIcjChZNMZYjApqyBt
Y4S4ZQR8E4v0o5nEGw0nOzJMBcdl5BUH2/5KVhkV7UXtpLjNo3UnXF8ZlsRg
S6dBYqO484Y4cXk7DW5h2PoIKyvZDzQJkTTsWbKA8vxEpySRYYvv8FkCl4Ga
htRNJ1wVV9siUiKripKM8pOTsg4JB9otlUdV2BUeQ2QpJjNcIbdwiTtdDkX9
vW1tYYTLn0G5gp+sqzlI5JQVbjmpVF1KLkaF8wwfzQFVTM+2WWMCiZ7IJ06G
dSncRfLIScFVDqPTTdE07Q6Dz9q5hdcu5ZyTglf3e9TJOXjkoc+s4erOwIIT
x8I2ONWJe52rTKU85QTiGagGseDE+40xZmB3EUeVN/3khLakZDZWnISKSG0U
K50cRJgR9/3kZB0ui1RbnA9VjBSyoRMx7g6xo0EZjSUnisVEB5a1Q3yoB645
YSxw29qonRzH21onalJqbXNOxtXA7W3BSYhina86rnbgbqBzTnxGFeUrncDX
Bx2ga52Ebx++by3Qh852exZf4IfOtqHB8MkTGz32IPB17WTtpu+tO/Coe+IG
mkiMfNfw1PZv2fbVb6923LCud7YHMHxr24y7dPIPw3kVKQ==
            "], {{0, 0}, {46, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 68, 
          "No repeating patten detected"}}, $CellContext`finalPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
         $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`v]]], \
$CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]]] := FromDigits[
         Reverse[
          IntegerDigits[$CellContext`n]]], $CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := FromDigits[
         Reverse[
          
          IntegerDigits[$CellContext`n, $CellContext`b]], $CellContext`b], \
$CellContext`listPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
            $CellContext`myIntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
          IntegerDigits[#, $CellContext`b]& , 
          1, $CellContext`m]], $CellContext`listPalindrome2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`b]]], \
$CellContext`countPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
             $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
        1, $CellContext`finalRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`IntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]], $CellContext`listRepeat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`b]]], $CellContext`countRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]] - 1, $CellContext`finalReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`reorder[$CellContext`i, $CellContext`m, $CellContext`r, \
$CellContext`b, $CellContext`v], 
         $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
            Flatten[
             Delete[
              Prepend[
               IntegerDigits[#, $CellContext`b], 
               Take[
                
                IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], \
$CellContext`listReorder2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], $CellContext`countReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
        1, $CellContext`finalRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRat[$CellContext`i, $CellContext`m, $CellContext`b], 
         $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`v]]], \
$CellContext`listRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]], $CellContext`listRat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`b]]], \
$CellContext`countRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
            Sort[
             
             IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]] - 1, $CellContext`ftrRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := If[Part[
           $CellContext`FindTransientRepeat[
            NestList[FromDigits[
              Sort[
               
               IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], 2], 2] =!= {}, 
         NestGraph[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m, VertexLabels -> "Name", ImageSize -> 
          Full], "No repeating patten detected"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->747834309]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 10, $CellContext`i$$ = 
    89, $CellContext`m$$ = 78, $CellContext`n$$ = 1, $CellContext`r$$ = 
    1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1, ""}, {
      1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
       "reorder-and-add algorithm", 4 -> "RATS sequence"}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`i$$], 89, "base 10 initial value"}, 10, 100000, 1}, {{
       Hold[$CellContext`m$$], 78, "iteration limit"}, 1, 500, 1}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Spacer[10], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
      Dynamic[
       Length[
        IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
       Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
       Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 1}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[10], 
         Manipulate`Place[5]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {599., {281., 287.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`n$12184$$ = False, $CellContext`i$12185$$ = 
    0, $CellContext`m$12186$$ = 0, $CellContext`r$12187$$ = 
    0, $CellContext`b$12188$$ = 0, $CellContext`v$12189$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
        89, $CellContext`m$$ = 78, $CellContext`n$$ = 1, $CellContext`r$$ = 
        1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$12184$$, False], 
        Hold[$CellContext`i$$, $CellContext`i$12185$$, 0], 
        Hold[$CellContext`m$$, $CellContext`m$12186$$, 0], 
        Hold[$CellContext`r$$, $CellContext`r$12187$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$12188$$, 0], 
        Hold[$CellContext`v$$, $CellContext`v$12189$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`func$}, $CellContext`func$ = {
           $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Text[
          Grid[{{
             StringJoin["visual representation in base ", 
              ToString[$CellContext`v$$]], "iterations\nin base 10", 
             StringJoin["iterations \nin base ", 
              ToString[$CellContext`b$$]], "number of \niterations", "graph"}, 
            Part[$CellContext`func$, $CellContext`n$$]}, Alignment -> Top, 
           ItemSize -> Full, Frame -> All]]], 
      "Specifications" :> {{{$CellContext`n$$, 1, ""}, {
         1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
          "reorder-and-add algorithm", 4 -> "RATS sequence"}, ControlType -> 
         SetterBar, ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], 
        Delimiter, {{$CellContext`i$$, 89, "base 10 initial value"}, 10, 
         100000, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 2}, {{$CellContext`m$$, 78, "iteration limit"}, 
         1, 500, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Spacer[10], 
          Manipulate`Place[3]}], {{$CellContext`r$$, 1, 
          "number of digits reordered"}, 1, 
         Dynamic[
          Length[
           IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, Appearance -> 
         "Labeled", Enabled -> 
         Dynamic[$CellContext`n$$ == 3]}, {{$CellContext`b$$, 10, 
          "base to compute algorithm"}, 2, 10, 1, ControlType -> PopupMenu, 
         ControlPlacement -> 
         4}, {{$CellContext`v$$, 2, "base to represent iterations"}, 2, 10, 1,
          ControlType -> PopupMenu, ControlPlacement -> 5}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[10], 
          Manipulate`Place[5]}]}, "Options" :> {ContentSize -> {600, 380}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{766., {323., 329.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`func = {{
          Graphics[
           
           Raster[{{0, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 2, 
            0}, {2, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 2, 
            1}, {2, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 
            0}, {2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 
            1}, {2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 1, 0, 
            0}, {2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 0, 1, 
            1}, {2, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 
            0}, {2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 2, 1, 2, 
            1}, {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 1, 
            0}, {2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 2, 0, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 
            0}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 0, 1, 2, 
            0}}, {{0, 0}, {20, 13}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 12}, {
          Graphics[
           Raster[CompressedData["
1:eJylmF2S20AIhIGb5DCpvOcIe4G9/1tG9NfIXlu2rEzZKuuP6QG6Yfzr6/vv
V0XE7/X9s75ZUet8HSMztt+5Dlm5jb683d4eXKfZx/XUOqzf/VBtl7cr2RfX
1dpenDe3H/3p8+wbqRnXJ3uunnSdbBZLzzayxrDO1mjLG4qGUCnb/VIGr6VO
ZbkErb8Fzp7Ar8hQWy6mAkD1ZbD14ns1fVL4KIW7TzO1rM14T9YP7+iYo9eg
95JF2GUhf7KsvFmunNmLK03Ys2cweShg8mQUL/elSHDqXntG3uwbcqa829HH
fK+4Q4prg8xIw+iH207DIxD9U2vrWdoHQXbgyTLamBzQ9ApAKny6hxe0WoWe
qPT0fch0pEo/QuHNJJFuc2nmzORt8juLB2q3I/gp1zcyL8m5k6SY0qFhCjpo
quz9kHsjSHURwdkDNyKBBLgwmuIKPvCEPVEqXFppzDshtIlRD/yHJ0QUAdJT
oZCRVhXDeGXzLZ6ObO0SgS4oedopSgNxM/Fl1A0aWCHv6PnJwc56xIZsIHjy
/i0aRUiixO2ygg3ahJ0WAWhU93aEWeZw6egPtCFCipvSPO7RVLIasod8G6L6
J/EOYlv5A02ZCFqMOU1gxI2yvlqpfkQKPO0KK7PIjUqjdqSkuJJkwsMIT43L
JVt2hCRjaE4+PaARa0QAVZbadRZ9NicqJq6PZgrKhipSmtfIuSkeYs0w7yme
gsQVZddqdTg+pAgVZNEzM3vJc8kQ+5GOpIA6IXb1e8CD18IsCyt4uEbJf8T6
AA3JRYawjrDfHMuCWvksUsZjWYaAtjN1KKWRMQXiCI+F2lU1ZykSnGbrrZI9
9zPFwqU2pMOiq2pGprXnxRB6DvQ9MRGyFNUzTt3jycTPzkInikuJMB1HynjQ
Hyf8nsZ9hsOPIzV4CoIntS/Gw+HGpF5FynjKUa3JXYjuEMTLSIHH3WGZYOhp
ul7e16kjODX1FUKHG9DpRN5ECjzujnBQhmk6Wv0eDU2l0xYJmoqGRp8wQz7T
rFo1XaYlGqfMqGWf/gmnh/uPM5Ha8fTcyI/1HIKfQ1PIMR7Cx7Bevj473MhO
3akwJc5FCjwun+qfKAl47TyaKudbsUWZUng2UoNnX4+bFWXBJ2hcwKkZYQU7
xal7POxAvDcx/z9D40rl7Y3UNd6q3+MIv6ZGiy3ap2iUt2anGsvXdeoQT3on
XEOpz9G4KEHR+ohTd3B2azR0H0cKIMNNS+kVM3ZwhLdgl9B4i0IfXSfq1IGd
mI3qce93YsxOgKBfNOMeYLqdi4PGp/xXwuVB2CnJl4f/F6rrkRo82jldjpTx
FP9D/I8Zb9HX5x/9SBz+
            "], {{0, 0}, {71, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJydl9GZ20AIhBk6SS9JAynhGrj+36JlfpDOkW3Je5/tk7wGdhgG9Ovr++9X
RsSf7fV7e0naXqnc1vYRvrX9s23K7btYX21b1t92pbq9XbB/mWJrZv1Otda3
db+Wr7dXGdD6DP9+mazfrKvtXqw/ldNyVDGozJflUPlL1S8j2Fl7op2qTrLc
5fJmAw6mfC0Lddv+sk60BylHWvcTjzZmOMLBEEQDNxsVO5SNJkZtDZjKupLT
GYsFj28WbgVOnTOF7aiwvbuwMp4gF3YT9m4bBQlHCB/Qxy/LvpIBqJ2OyIDa
XHZ2w57VABQC9e4DH5LGqUmrjQTwFbDFDjKXncqJsw5SEcwHywBAvjqrQyYG
Z9ikTYAzyoqxgYkc12ZDDO/MC5Jgb073HoepJdk9GVADEka0ckdq06h0XhpY
GDBQOb/h2FyC5UHZ76nJS4JEV4aMqcll/ihdKH53RTuqYxyunGE5fnNXAZBE
C9KEVSp/GoHbCbcQDJdSDCmdfRtL/YxjMuxCyaY+pe2TiuIE4IiHOBATiCnD
OSoRcA9+qMs1HwMxDQsupzcNMmDnVFS2nD3GgZFguwi72D37FaOPzepHWEeo
snns4OpgTneLImj/vyYrFl3Eu6lqGYV6p3mx2xbo0VC5Zip6jTAD6VkcCYeL
G12IlSqRe0owD5JwYiRMI+8TyjnoWhcFjc7jSCRDXSHZsqxWMOhCp3hmxH2N
5hGmmRUSDmUg4M9sIHTWPZM8bW4qflfnp8uUpufZ0h4fciulnuTFgeA9uluQ
3xZRE+R5XhpXxCyyOy/yqlYXdbt6dRo4ru6aTAtBi6f5vYykGyG5pNFN+3KN
v7SR9Gjra/ewdL8+Fs+bSMwONyeTbTK1k/+dkcMJWgEpeGrzXRyZ3RSZYuhX
LhcX8Ns41qK5AaTatXvdi3r5aaOnKnObSooeKa/YyB5WEJNdTnQlLyx6g3qe
6dnD+nDRhhgGwCD2We5SXhz+3isiuytb1a7lpWUtmeMVB2qc9Zenp6FCRgEZ
S67mxVYYI5kaDM4I3NVIevSEqKluIbcCIQJPZmj91bwQCGBaFZmSzvr+KyNT
aPRP9dPKjYV+RvNiBu47gcQktdG4l5fkiYlxLLuGb+UFIzM3B2J7Lw4PBOSH
2r+Zl4rET6cMr6GrOvZgpMcqT7l38+LVD7/I4828YEM0/x6AP7HBMBNHkb+7
epQSj2if2OjHBdTjozjg2T5mfmoEIfwwL2upJ8vr/eUskr1lfmyjn0I/zQuR
CGX7B6itHHI=
            "], {{0, 0}, {68, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{
            15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 15467728,
              97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 
             15467728, 97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJyNVut5xCAMs7xJF+gWXaAj3ALd/19BkrnkkgD0S9sQ4YeQDV+vv99XRsRP
e77bg/bDX4hE9icTbUQG2kv7p73on7aMkDaTHdUevYATRvYp2UWfy26n4/p7
f2t/+2cZAJ33ePq3pCO5SVqXP67iQk8YwDCZAOchz+kFckpwZAXMYHtmPUD5
Dc4x2KATOU+mregZO01znd5sR7Z7tN0RaQyFm7aFkayIcjChZNMZYjApqyBt
Y4S4ZQR8E4v0o5nEGw0nOzJMBcdl5BUH2/5KVhkV7UXtpLjNo3UnXF8ZlsRg
S6dBYqO484Y4cXk7DW5h2PoIKyvZDzQJkTTsWbKA8vxEpySRYYvv8FkCl4Ga
htRNJ1wVV9siUiKripKM8pOTsg4JB9otlUdV2BUeQ2QpJjNcIbdwiTtdDkX9
vW1tYYTLn0G5gp+sqzlI5JQVbjmpVF1KLkaF8wwfzQFVTM+2WWMCiZ7IJ06G
dSncRfLIScFVDqPTTdE07Q6Dz9q5hdcu5ZyTglf3e9TJOXjkoc+s4erOwIIT
x8I2ONWJe52rTKU85QTiGagGseDE+40xZmB3EUeVN/3khLakZDZWnISKSG0U
K50cRJgR9/3kZB0ui1RbnA9VjBSyoRMx7g6xo0EZjSUnisVEB5a1Q3yoB645
YSxw29qonRzH21onalJqbXNOxtXA7W3BSYhina86rnbgbqBzTnxGFeUrncDX
Bx2ga52Ebx++by3Qh852exZf4IfOtqHB8MkTGz32IPB17WTtpu+tO/Coe+IG
mkiMfNfw1PZv2fbVb6923LCud7YHMHxr24y7dPIPw3kVKQ==
            "], {{0, 0}, {46, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 68, 
          "No repeating patten detected"}}, $CellContext`finalPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
         $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`v]]], \
$CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]]] := FromDigits[
         Reverse[
          IntegerDigits[$CellContext`n]]], $CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := FromDigits[
         Reverse[
          
          IntegerDigits[$CellContext`n, $CellContext`b]], $CellContext`b], \
$CellContext`listPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
            $CellContext`myIntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
          IntegerDigits[#, $CellContext`b]& , 
          1, $CellContext`m]], $CellContext`listPalindrome2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`b]]], \
$CellContext`countPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
             $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
        1, $CellContext`finalRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`IntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]], $CellContext`listRepeat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`b]]], $CellContext`countRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]] - 1, $CellContext`finalReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`reorder[$CellContext`i, $CellContext`m, $CellContext`r, \
$CellContext`b, $CellContext`v], 
         $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
            Flatten[
             Delete[
              Prepend[
               IntegerDigits[#, $CellContext`b], 
               Take[
                
                IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], \
$CellContext`listReorder2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], $CellContext`countReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
        1, $CellContext`finalRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRat[$CellContext`i, $CellContext`m, $CellContext`b], 
         $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`v]]], \
$CellContext`listRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]], $CellContext`listRat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`b]]], \
$CellContext`countRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
            Sort[
             
             IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]] - 1, $CellContext`ftrRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := If[Part[
           $CellContext`FindTransientRepeat[
            NestList[FromDigits[
              Sort[
               
               IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], 2], 2] =!= {}, 
         NestGraph[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m, VertexLabels -> "Name", ImageSize -> 
          Full], "No repeating patten detected"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->130440822],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 4, $CellContext`i$$ = 
    26198, $CellContext`m$$ = 42, $CellContext`n$$ = 3, $CellContext`r$$ = 
    1, $CellContext`v$$ = 2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 3, ""}, {
      1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
       "reorder-and-add algorithm", 4 -> "RATS sequence"}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`i$$], 26198, "base 10 initial value"}, 10, 100000, 
      1}, {{
       Hold[$CellContext`m$$], 42, "iteration limit"}, 1, 500, 1}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Spacer[10], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
      Dynamic[
       Length[
        IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
       Hold[$CellContext`b$$], 4, "base to compute algorithm"}, 2, 10, 1}, {{
       Hold[$CellContext`v$$], 2, "base to represent iterations"}, 2, 10, 1}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[10], 
         Manipulate`Place[5]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {746., {471., 479.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`n$12268$$ = False, $CellContext`i$12269$$ = 
    0, $CellContext`m$12270$$ = 0, $CellContext`r$12271$$ = 
    0, $CellContext`b$12272$$ = 0, $CellContext`v$12273$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`b$$ = 4, $CellContext`i$$ = 
        26198, $CellContext`m$$ = 42, $CellContext`n$$ = 3, $CellContext`r$$ = 
        1, $CellContext`v$$ = 2}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$12268$$, False], 
        Hold[$CellContext`i$$, $CellContext`i$12269$$, 0], 
        Hold[$CellContext`m$$, $CellContext`m$12270$$, 0], 
        Hold[$CellContext`r$$, $CellContext`r$12271$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$12272$$, 0], 
        Hold[$CellContext`v$$, $CellContext`v$12273$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`func$}, $CellContext`func$ = {
           $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Text[
          Grid[{{
             StringJoin["visual representation in base ", 
              ToString[$CellContext`v$$]], "iterations\nin base 10", 
             StringJoin["iterations \nin base ", 
              ToString[$CellContext`b$$]], "number of \niterations", "graph"}, 
            Part[$CellContext`func$, $CellContext`n$$]}, Alignment -> Top, 
           ItemSize -> Full, Frame -> All]]], 
      "Specifications" :> {{{$CellContext`n$$, 3, ""}, {
         1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
          "reorder-and-add algorithm", 4 -> "RATS sequence"}, ControlType -> 
         SetterBar, ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], 
        Delimiter, {{$CellContext`i$$, 26198, "base 10 initial value"}, 10, 
         100000, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 2}, {{$CellContext`m$$, 42, "iteration limit"}, 
         1, 500, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Spacer[10], 
          Manipulate`Place[3]}], {{$CellContext`r$$, 1, 
          "number of digits reordered"}, 1, 
         Dynamic[
          Length[
           IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, Appearance -> 
         "Labeled", Enabled -> 
         Dynamic[$CellContext`n$$ == 3]}, {{$CellContext`b$$, 4, 
          "base to compute algorithm"}, 2, 10, 1, ControlType -> PopupMenu, 
         ControlPlacement -> 
         4}, {{$CellContext`v$$, 2, "base to represent iterations"}, 2, 10, 1,
          ControlType -> PopupMenu, ControlPlacement -> 5}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[10], 
          Manipulate`Place[5]}]}, "Options" :> {ContentSize -> {600, 380}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{766., {323., 329.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`func = {{
          Graphics[
           
           Raster[{{0, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 2, 
            0}, {2, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 2, 
            1}, {2, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 
            0}, {2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 
            1}, {2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 1, 0, 
            0}, {2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 0, 1, 
            1}, {2, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 
            0}, {2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 2, 1, 2, 
            1}, {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 1, 
            0}, {2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 2, 0, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 
            0}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 0, 1, 2, 
            0}}, {{0, 0}, {20, 13}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 12}, {
          Graphics[
           Raster[CompressedData["
1:eJylmF2S20AIhIGb5DCpvOcIe4G9/1tG9NfIXlu2rEzZKuuP6QG6Yfzr6/vv
V0XE7/X9s75ZUet8HSMztt+5Dlm5jb683d4eXKfZx/XUOqzf/VBtl7cr2RfX
1dpenDe3H/3p8+wbqRnXJ3uunnSdbBZLzzayxrDO1mjLG4qGUCnb/VIGr6VO
ZbkErb8Fzp7Ar8hQWy6mAkD1ZbD14ns1fVL4KIW7TzO1rM14T9YP7+iYo9eg
95JF2GUhf7KsvFmunNmLK03Ys2cweShg8mQUL/elSHDqXntG3uwbcqa829HH
fK+4Q4prg8xIw+iH207DIxD9U2vrWdoHQXbgyTLamBzQ9ApAKny6hxe0WoWe
qPT0fch0pEo/QuHNJJFuc2nmzORt8juLB2q3I/gp1zcyL8m5k6SY0qFhCjpo
quz9kHsjSHURwdkDNyKBBLgwmuIKPvCEPVEqXFppzDshtIlRD/yHJ0QUAdJT
oZCRVhXDeGXzLZ6ObO0SgS4oedopSgNxM/Fl1A0aWCHv6PnJwc56xIZsIHjy
/i0aRUiixO2ygg3ahJ0WAWhU93aEWeZw6egPtCFCipvSPO7RVLIasod8G6L6
J/EOYlv5A02ZCFqMOU1gxI2yvlqpfkQKPO0KK7PIjUqjdqSkuJJkwsMIT43L
JVt2hCRjaE4+PaARa0QAVZbadRZ9NicqJq6PZgrKhipSmtfIuSkeYs0w7yme
gsQVZddqdTg+pAgVZNEzM3vJc8kQ+5GOpIA6IXb1e8CD18IsCyt4uEbJf8T6
AA3JRYawjrDfHMuCWvksUsZjWYaAtjN1KKWRMQXiCI+F2lU1ZykSnGbrrZI9
9zPFwqU2pMOiq2pGprXnxRB6DvQ9MRGyFNUzTt3jycTPzkInikuJMB1HynjQ
Hyf8nsZ9hsOPIzV4CoIntS/Gw+HGpF5FynjKUa3JXYjuEMTLSIHH3WGZYOhp
ul7e16kjODX1FUKHG9DpRN5ECjzujnBQhmk6Wv0eDU2l0xYJmoqGRp8wQz7T
rFo1XaYlGqfMqGWf/gmnh/uPM5Ha8fTcyI/1HIKfQ1PIMR7Cx7Bevj473MhO
3akwJc5FCjwun+qfKAl47TyaKudbsUWZUng2UoNnX4+bFWXBJ2hcwKkZYQU7
xal7POxAvDcx/z9D40rl7Y3UNd6q3+MIv6ZGiy3ap2iUt2anGsvXdeoQT3on
XEOpz9G4KEHR+ohTd3B2azR0H0cKIMNNS+kVM3ZwhLdgl9B4i0IfXSfq1IGd
mI3qce93YsxOgKBfNOMeYLqdi4PGp/xXwuVB2CnJl4f/F6rrkRo82jldjpTx
FP9D/I8Zb9HX5x/9SBz+
            "], {{0, 0}, {71, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJydl9GZ20AIhBk6SS9JAynhGrj+36JlfpDOkW3Je5/tk7wGdhgG9Ovr++9X
RsSf7fV7e0naXqnc1vYRvrX9s23K7btYX21b1t92pbq9XbB/mWJrZv1Otda3
db+Wr7dXGdD6DP9+mazfrKvtXqw/ldNyVDGozJflUPlL1S8j2Fl7op2qTrLc
5fJmAw6mfC0Lddv+sk60BylHWvcTjzZmOMLBEEQDNxsVO5SNJkZtDZjKupLT
GYsFj28WbgVOnTOF7aiwvbuwMp4gF3YT9m4bBQlHCB/Qxy/LvpIBqJ2OyIDa
XHZ2w57VABQC9e4DH5LGqUmrjQTwFbDFDjKXncqJsw5SEcwHywBAvjqrQyYG
Z9ikTYAzyoqxgYkc12ZDDO/MC5Jgb073HoepJdk9GVADEka0ckdq06h0XhpY
GDBQOb/h2FyC5UHZ76nJS4JEV4aMqcll/ihdKH53RTuqYxyunGE5fnNXAZBE
C9KEVSp/GoHbCbcQDJdSDCmdfRtL/YxjMuxCyaY+pe2TiuIE4IiHOBATiCnD
OSoRcA9+qMs1HwMxDQsupzcNMmDnVFS2nD3GgZFguwi72D37FaOPzepHWEeo
snns4OpgTneLImj/vyYrFl3Eu6lqGYV6p3mx2xbo0VC5Zip6jTAD6VkcCYeL
G12IlSqRe0owD5JwYiRMI+8TyjnoWhcFjc7jSCRDXSHZsqxWMOhCp3hmxH2N
5hGmmRUSDmUg4M9sIHTWPZM8bW4qflfnp8uUpufZ0h4fciulnuTFgeA9uluQ
3xZRE+R5XhpXxCyyOy/yqlYXdbt6dRo4ru6aTAtBi6f5vYykGyG5pNFN+3KN
v7SR9Gjra/ewdL8+Fs+bSMwONyeTbTK1k/+dkcMJWgEpeGrzXRyZ3RSZYuhX
LhcX8Ns41qK5AaTatXvdi3r5aaOnKnObSooeKa/YyB5WEJNdTnQlLyx6g3qe
6dnD+nDRhhgGwCD2We5SXhz+3isiuytb1a7lpWUtmeMVB2qc9Zenp6FCRgEZ
S67mxVYYI5kaDM4I3NVIevSEqKluIbcCIQJPZmj91bwQCGBaFZmSzvr+KyNT
aPRP9dPKjYV+RvNiBu47gcQktdG4l5fkiYlxLLuGb+UFIzM3B2J7Lw4PBOSH
2r+Zl4rET6cMr6GrOvZgpMcqT7l38+LVD7/I4828YEM0/x6AP7HBMBNHkb+7
epQSj2if2OjHBdTjozjg2T5mfmoEIfwwL2upJ8vr/eUskr1lfmyjn0I/zQuR
CGX7B6itHHI=
            "], {{0, 0}, {68, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{
            15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 15467728,
              97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 
             15467728, 97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJyNVut5xCAMs7xJF+gWXaAj3ALd/19BkrnkkgD0S9sQ4YeQDV+vv99XRsRP
e77bg/bDX4hE9icTbUQG2kv7p73on7aMkDaTHdUevYATRvYp2UWfy26n4/p7
f2t/+2cZAJ33ePq3pCO5SVqXP67iQk8YwDCZAOchz+kFckpwZAXMYHtmPUD5
Dc4x2KATOU+mregZO01znd5sR7Z7tN0RaQyFm7aFkayIcjChZNMZYjApqyBt
Y4S4ZQR8E4v0o5nEGw0nOzJMBcdl5BUH2/5KVhkV7UXtpLjNo3UnXF8ZlsRg
S6dBYqO484Y4cXk7DW5h2PoIKyvZDzQJkTTsWbKA8vxEpySRYYvv8FkCl4Ga
htRNJ1wVV9siUiKripKM8pOTsg4JB9otlUdV2BUeQ2QpJjNcIbdwiTtdDkX9
vW1tYYTLn0G5gp+sqzlI5JQVbjmpVF1KLkaF8wwfzQFVTM+2WWMCiZ7IJ06G
dSncRfLIScFVDqPTTdE07Q6Dz9q5hdcu5ZyTglf3e9TJOXjkoc+s4erOwIIT
x8I2ONWJe52rTKU85QTiGagGseDE+40xZmB3EUeVN/3khLakZDZWnISKSG0U
K50cRJgR9/3kZB0ui1RbnA9VjBSyoRMx7g6xo0EZjSUnisVEB5a1Q3yoB645
YSxw29qonRzH21onalJqbXNOxtXA7W3BSYhina86rnbgbqBzTnxGFeUrncDX
Bx2ga52Ebx++by3Qh852exZf4IfOtqHB8MkTGz32IPB17WTtpu+tO/Coe+IG
mkiMfNfw1PZv2fbVb6923LCud7YHMHxr24y7dPIPw3kVKQ==
            "], {{0, 0}, {46, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 68, 
          "No repeating patten detected"}}, $CellContext`finalPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
         $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`v]]], \
$CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]]] := FromDigits[
         Reverse[
          IntegerDigits[$CellContext`n]]], $CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := FromDigits[
         Reverse[
          
          IntegerDigits[$CellContext`n, $CellContext`b]], $CellContext`b], \
$CellContext`listPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
            $CellContext`myIntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
          IntegerDigits[#, $CellContext`b]& , 
          1, $CellContext`m]], $CellContext`listPalindrome2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`b]]], \
$CellContext`countPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
             $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
        1, $CellContext`finalRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`IntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]], $CellContext`listRepeat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`b]]], $CellContext`countRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]] - 1, $CellContext`finalReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`reorder[$CellContext`i, $CellContext`m, $CellContext`r, \
$CellContext`b, $CellContext`v], 
         $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
            Flatten[
             Delete[
              Prepend[
               IntegerDigits[#, $CellContext`b], 
               Take[
                
                IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], \
$CellContext`listReorder2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], $CellContext`countReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
        1, $CellContext`finalRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRat[$CellContext`i, $CellContext`m, $CellContext`b], 
         $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`v]]], \
$CellContext`listRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]], $CellContext`listRat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`b]]], \
$CellContext`countRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
            Sort[
             
             IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]] - 1, $CellContext`ftrRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := If[Part[
           $CellContext`FindTransientRepeat[
            NestList[FromDigits[
              Sort[
               
               IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], 2], 2] =!= {}, 
         NestGraph[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m, VertexLabels -> "Name", ImageSize -> 
          Full], "No repeating patten detected"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->360084393],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 10, $CellContext`i$$ = 
    15617, $CellContext`m$$ = 68, $CellContext`n$$ = 4, $CellContext`r$$ = 
    1, $CellContext`v$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 4, ""}, {
      1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
       "reorder-and-add algorithm", 4 -> "RATS sequence"}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`i$$], 15617, "base 10 initial value"}, 10, 100000, 
      1}, {{
       Hold[$CellContext`m$$], 68, "iteration limit"}, 1, 500, 1}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Spacer[10], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`r$$], 1, "number of digits reordered"}, 1, 
      Dynamic[
       Length[
        IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1}, {{
       Hold[$CellContext`b$$], 10, "base to compute algorithm"}, 2, 10, 1}, {{
       Hold[$CellContext`v$$], 3, "base to represent iterations"}, 2, 10, 1}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[10], 
         Manipulate`Place[5]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {1317., {741., 747.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`n$12352$$ = False, $CellContext`i$12353$$ = 
    0, $CellContext`m$12354$$ = 0, $CellContext`r$12355$$ = 
    0, $CellContext`b$12356$$ = 0, $CellContext`v$12357$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`b$$ = 10, $CellContext`i$$ = 
        15617, $CellContext`m$$ = 68, $CellContext`n$$ = 4, $CellContext`r$$ = 
        1, $CellContext`v$$ = 3}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$12352$$, False], 
        Hold[$CellContext`i$$, $CellContext`i$12353$$, 0], 
        Hold[$CellContext`m$$, $CellContext`m$12354$$, 0], 
        Hold[$CellContext`r$$, $CellContext`r$12355$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$12356$$, 0], 
        Hold[$CellContext`v$$, $CellContext`v$12357$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`func$}, $CellContext`func$ = {
           $CellContext`finalPalindrome[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRepeat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalReorder[$CellContext`i$$, $CellContext`m$$, \
$CellContext`r$$, $CellContext`b$$, $CellContext`v$$], 
           $CellContext`finalRat[$CellContext`i$$, $CellContext`m$$, \
$CellContext`b$$, $CellContext`v$$]}; Text[
          Grid[{{
             StringJoin["visual representation in base ", 
              ToString[$CellContext`v$$]], "iterations\nin base 10", 
             StringJoin["iterations \nin base ", 
              ToString[$CellContext`b$$]], "number of \niterations", "graph"}, 
            Part[$CellContext`func$, $CellContext`n$$]}, Alignment -> Top, 
           ItemSize -> Full, Frame -> All]]], 
      "Specifications" :> {{{$CellContext`n$$, 4, ""}, {
         1 -> "196-algorithm palindrome checker", 2 -> "196 algorithm", 3 -> 
          "reorder-and-add algorithm", 4 -> "RATS sequence"}, ControlType -> 
         SetterBar, ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], 
        Delimiter, {{$CellContext`i$$, 15617, "base 10 initial value"}, 10, 
         100000, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 2}, {{$CellContext`m$$, 68, "iteration limit"}, 
         1, 500, 1, Appearance -> "Labeled", ImageSize -> Tiny, 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Spacer[10], 
          Manipulate`Place[3]}], {{$CellContext`r$$, 1, 
          "number of digits reordered"}, 1, 
         Dynamic[
          Length[
           IntegerDigits[$CellContext`i$$, $CellContext`b$$]]], 1, Appearance -> 
         "Labeled", Enabled -> 
         Dynamic[$CellContext`n$$ == 3]}, {{$CellContext`b$$, 10, 
          "base to compute algorithm"}, 2, 10, 1, ControlType -> PopupMenu, 
         ControlPlacement -> 
         4}, {{$CellContext`v$$, 3, "base to represent iterations"}, 2, 10, 1,
          ControlType -> PopupMenu, ControlPlacement -> 5}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[10], 
          Manipulate`Place[5]}]}, "Options" :> {ContentSize -> {600, 380}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{766., {323., 329.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`func = {{
          Graphics[
           
           Raster[{{0, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 2, 
            0}, {2, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 2, 
            1}, {2, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 
            0}, {2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 
            1}, {2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 1, 0, 
            0}, {2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 0, 1, 
            1}, {2, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 
            0}, {2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 2, 1, 2, 
            1}, {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 1, 
            0}, {2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 2, 0, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 
            0}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 
            1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 0, 1, 2, 
            0}}, {{0, 0}, {20, 13}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
            41967013, 73043927, 145977964, 615757505, 1121515021, 
            2326666232}], {270, 255}, Scrollbars -> {False, True}], 12}, {
          Graphics[
           Raster[CompressedData["
1:eJylmF2S20AIhIGb5DCpvOcIe4G9/1tG9NfIXlu2rEzZKuuP6QG6Yfzr6/vv
V0XE7/X9s75ZUet8HSMztt+5Dlm5jb683d4eXKfZx/XUOqzf/VBtl7cr2RfX
1dpenDe3H/3p8+wbqRnXJ3uunnSdbBZLzzayxrDO1mjLG4qGUCnb/VIGr6VO
ZbkErb8Fzp7Ar8hQWy6mAkD1ZbD14ns1fVL4KIW7TzO1rM14T9YP7+iYo9eg
95JF2GUhf7KsvFmunNmLK03Ys2cweShg8mQUL/elSHDqXntG3uwbcqa829HH
fK+4Q4prg8xIw+iH207DIxD9U2vrWdoHQXbgyTLamBzQ9ApAKny6hxe0WoWe
qPT0fch0pEo/QuHNJJFuc2nmzORt8juLB2q3I/gp1zcyL8m5k6SY0qFhCjpo
quz9kHsjSHURwdkDNyKBBLgwmuIKPvCEPVEqXFppzDshtIlRD/yHJ0QUAdJT
oZCRVhXDeGXzLZ6ObO0SgS4oedopSgNxM/Fl1A0aWCHv6PnJwc56xIZsIHjy
/i0aRUiixO2ygg3ahJ0WAWhU93aEWeZw6egPtCFCipvSPO7RVLIasod8G6L6
J/EOYlv5A02ZCFqMOU1gxI2yvlqpfkQKPO0KK7PIjUqjdqSkuJJkwsMIT43L
JVt2hCRjaE4+PaARa0QAVZbadRZ9NicqJq6PZgrKhipSmtfIuSkeYs0w7yme
gsQVZddqdTg+pAgVZNEzM3vJc8kQ+5GOpIA6IXb1e8CD18IsCyt4uEbJf8T6
AA3JRYawjrDfHMuCWvksUsZjWYaAtjN1KKWRMQXiCI+F2lU1ZykSnGbrrZI9
9zPFwqU2pMOiq2pGprXnxRB6DvQ9MRGyFNUzTt3jycTPzkInikuJMB1HynjQ
Hyf8nsZ9hsOPIzV4CoIntS/Gw+HGpF5FynjKUa3JXYjuEMTLSIHH3WGZYOhp
ul7e16kjODX1FUKHG9DpRN5ECjzujnBQhmk6Wv0eDU2l0xYJmoqGRp8wQz7T
rFo1XaYlGqfMqGWf/gmnh/uPM5Ha8fTcyI/1HIKfQ1PIMR7Cx7Bevj473MhO
3akwJc5FCjwun+qfKAl47TyaKudbsUWZUng2UoNnX4+bFWXBJ2hcwKkZYQU7
xal7POxAvDcx/z9D40rl7Y3UNd6q3+MIv6ZGiy3ap2iUt2anGsvXdeoQT3on
XEOpz9G4KEHR+ohTd3B2azR0H0cKIMNNS+kVM3ZwhLdgl9B4i0IfXSfq1IGd
mI3qce93YsxOgKBfNOMeYLqdi4PGp/xXwuVB2CnJl4f/F6rrkRo82jldjpTx
FP9D/I8Zb9HX5x/9SBz+
            "], {{0, 0}, {71, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87268, 173546, 818917, 1538735, 6917086, 13724282, 
             41967013, 73043927, 145977964, 615757505, 1121515021, 2326666232,
              4653332464, 9295666028, 17502331957, 93415652528, 175941303967, 
             945244453538, 1780598896087, 9587587846958, 18184075704817, 
             90024832752998, 179950556595007, 880546211654978, 
             1760002324300066, 8360036556300737, 15730073112601375, 
             73040694249605126, 135191388499209163, 497094383382400694, 
             993098666765891488, 1877297234432781887, 9759169578760709668, 
             18428240257520329247, 92720542832724611728, 
             175432185556549114457, 929844131212130349028, 
             1750787162424261797957, 9348758786666879668528, 
             17607428573333758246967, 94571714306671340717638, 
             178243418624331682435187, 959777704757758496778058, 
             1810655399615515904556017, 8917209494770685840116198, 
             17833319980631460789143396, 87167518687045069780477267, 
             163444927483099148462053445, 707795192325089533191497806, 
             1316589383661070056483095513, 4472493230161771720322951644, 
             8934085460433543330646894388, 17769071920766996671292698786, 
             86558701138436963374209795557, 162118491385773926857320581125, 
             683303515144403304440515392386, 1366597030188806608882030695772, 
             4142557333076872697692338652403, 7185125666044835484395676204817,
              14369152431979680868802341420634, 
             57971566752866489566715766616975, 
             115933233504633088033541533134950, 
             175364568649963968369946865474461, 
             339839137299927837739893730938032, 
             570678174698865576469886462876965, 
             1140356439387830252038782934753040, 
             1543930832266132772426622281283451, 
             3087752654532375544743244661676902}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJydl9GZ20AIhBk6SS9JAynhGrj+36JlfpDOkW3Je5/tk7wGdhgG9Ovr++9X
RsSf7fV7e0naXqnc1vYRvrX9s23K7btYX21b1t92pbq9XbB/mWJrZv1Otda3
db+Wr7dXGdD6DP9+mazfrKvtXqw/ldNyVDGozJflUPlL1S8j2Fl7op2qTrLc
5fJmAw6mfC0Lddv+sk60BylHWvcTjzZmOMLBEEQDNxsVO5SNJkZtDZjKupLT
GYsFj28WbgVOnTOF7aiwvbuwMp4gF3YT9m4bBQlHCB/Qxy/LvpIBqJ2OyIDa
XHZ2w57VABQC9e4DH5LGqUmrjQTwFbDFDjKXncqJsw5SEcwHywBAvjqrQyYG
Z9ikTYAzyoqxgYkc12ZDDO/MC5Jgb073HoepJdk9GVADEka0ckdq06h0XhpY
GDBQOb/h2FyC5UHZ76nJS4JEV4aMqcll/ihdKH53RTuqYxyunGE5fnNXAZBE
C9KEVSp/GoHbCbcQDJdSDCmdfRtL/YxjMuxCyaY+pe2TiuIE4IiHOBATiCnD
OSoRcA9+qMs1HwMxDQsupzcNMmDnVFS2nD3GgZFguwi72D37FaOPzepHWEeo
snns4OpgTneLImj/vyYrFl3Eu6lqGYV6p3mx2xbo0VC5Zip6jTAD6VkcCYeL
G12IlSqRe0owD5JwYiRMI+8TyjnoWhcFjc7jSCRDXSHZsqxWMOhCp3hmxH2N
5hGmmRUSDmUg4M9sIHTWPZM8bW4qflfnp8uUpufZ0h4fciulnuTFgeA9uluQ
3xZRE+R5XhpXxCyyOy/yqlYXdbt6dRo4ru6aTAtBi6f5vYykGyG5pNFN+3KN
v7SR9Gjra/ewdL8+Fs+bSMwONyeTbTK1k/+dkcMJWgEpeGrzXRyZ3RSZYuhX
LhcX8Ns41qK5AaTatXvdi3r5aaOnKnObSooeKa/YyB5WEJNdTnQlLyx6g3qe
6dnD+nDRhhgGwCD2We5SXhz+3isiuytb1a7lpWUtmeMVB2qc9Zenp6FCRgEZ
S67mxVYYI5kaDM4I3NVIevSEqKluIbcCIQJPZmj91bwQCGBaFZmSzvr+KyNT
aPRP9dPKjYV+RvNiBu47gcQktdG4l5fkiYlxLLuGb+UFIzM3B2J7Lw4PBOSH
2r+Zl4rET6cMr6GrOvZgpMcqT7l38+LVD7/I4828YEM0/x6AP7HBMBNHkb+7
epQSj2if2OjHBdTjozjg2T5mfmoEIfwwL2upJ8vr/eUskr1lfmyjn0I/zQuR
CGX7B6itHHI=
            "], {{0, 0}, {68, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           Column[{
            15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 15467728,
              97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 87178, 175895, 693484, 1162832, 3279115, 8607026, 
             15467728, 97014500, 106715950, 117387545, 629126299, 1592038928, 
             9751242820, 10726367102, 31799003812, 54978904193, 90476794612, 
             119524474073, 431476921480, 474624613628, 1322087074990, 
             1454295782489, 10599725360737, 81659697896810, 89825667686491, 
             108808234455140, 119689057900654, 531657963690719, 
             1484823760059790, 1633306136065769, 10796636749672345, 
             61876300424639579, 158063930467103536, 773870323513813889, 
             1751257355865195277, 8926383091451714804, 13819021400596886284, 
             55200923540656574912, 80721015894722232403, 
             118793117484194455643, 430672429232613901207, 
             1173739672155875291327, 8291113639371462820459, 
             18120225003308609102504, 59932247503639470012754, 
             105925472254003417014029, 1016518019479403758715431, 
             2118169821427344134586974, 6329986803570078548045671, 
             7962985483927086402850238, 16759284032319795043135261, 
             28435212435551774547448787, 101278733679106952002193665, 
             611406607047017647202413031, 772547267751719411922654334, 
             1249801994526891353114919767, 8374782193979580488426411743, 
             12212260413377538537269052917, 83433486454715292390995958208, 
             171776835100186821630095554028, 988954518610205503793105109430, 
             1087849970471226054172415620373, 4196634967518348659589657182410,
              4616298464270183525548622900651, 
             6077928310697201878103485190716, 
             12685721141766922065913833709787, 
             83954293255943614272505217080765, 
             142349722581537975699755738788841}], {270, 255}, 
           Scrollbars -> {False, True}], 68}, {
          Graphics[
           Raster[CompressedData["
1:eJyNVut5xCAMs7xJF+gWXaAj3ALd/19BkrnkkgD0S9sQ4YeQDV+vv99XRsRP
e77bg/bDX4hE9icTbUQG2kv7p73on7aMkDaTHdUevYATRvYp2UWfy26n4/p7
f2t/+2cZAJ33ePq3pCO5SVqXP67iQk8YwDCZAOchz+kFckpwZAXMYHtmPUD5
Dc4x2KATOU+mregZO01znd5sR7Z7tN0RaQyFm7aFkayIcjChZNMZYjApqyBt
Y4S4ZQR8E4v0o5nEGw0nOzJMBcdl5BUH2/5KVhkV7UXtpLjNo3UnXF8ZlsRg
S6dBYqO484Y4cXk7DW5h2PoIKyvZDzQJkTTsWbKA8vxEpySRYYvv8FkCl4Ga
htRNJ1wVV9siUiKripKM8pOTsg4JB9otlUdV2BUeQ2QpJjNcIbdwiTtdDkX9
vW1tYYTLn0G5gp+sqzlI5JQVbjmpVF1KLkaF8wwfzQFVTM+2WWMCiZ7IJ06G
dSncRfLIScFVDqPTTdE07Q6Dz9q5hdcu5ZyTglf3e9TJOXjkoc+s4erOwIIT
x8I2ONWJe52rTKU85QTiGagGseDE+40xZmB3EUeVN/3khLakZDZWnISKSG0U
K50cRJgR9/3kZB0ui1RbnA9VjBSyoRMx7g6xo0EZjSUnisVEB5a1Q3yoB645
YSxw29qonRzH21onalJqbXNOxtXA7W3BSYhina86rnbgbqBzTnxGFeUrncDX
Bx2ga52Ebx++by3Qh852exZf4IfOtqHB8MkTGz32IPB17WTtpu+tO/Coe+IG
mkiMfNfw1PZv2fbVb6923LCud7YHMHxr24y7dPIPw3kVKQ==
            "], {{0, 0}, {46, 69}}, {0, 2}], Frame -> Automatic, 
           FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
             Automatic}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 
          Pane[
           
           Column[{15617, 26788, 11555, 6667, 13334, 55666, 112223, 334444, 
             777788, 1555666, 1122278, 4448899, 13334447, 77777788, 155555666,
              111122278, 333348899, 1122223339, 144455555, 67999, 156779, 
             113344, 555566, 1111222, 2333333, 5566666, 11222333, 44444455, 
             88889999, 178888888, 156777779, 113344555, 666677888, 1444555555,
              167999, 116677, 238889, 1122277, 4448888, 12333337, 55666688, 
             133333444, 556667777, 1233334444, 5566667777, 12333334444, 
             55666667777, 123333334444, 556666667777, 1233333334444, 
             5566666667777, 12333333334444, 55666666667777, 123333333334444, 
             556666666667777, 1233333333334444, 5566666666667777, 
             12333333333334444, 55666666666667777, 123333333333334444, 
             556666666666667777, 1233333333333334444, 5566666666666667777, 
             12333333333333334444, 55666666666666667777, 
             123333333333333334444, 556666666666666667777, 
             1233333333333333334444, 5566666666666666667777}], {270, 255}, 
           Scrollbars -> {False, True}], 68, 
          "No repeating patten detected"}}, $CellContext`finalPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`palindrome[$CellContext`i, $CellContext`m, \
$CellContext`b, $CellContext`v], 
         $CellContext`listPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listPalindrome2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countPalindrome[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`palindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`v]]], \
$CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]]] := FromDigits[
         Reverse[
          IntegerDigits[$CellContext`n]]], $CellContext`myIntegerReverse[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := FromDigits[
         Reverse[
          
          IntegerDigits[$CellContext`n, $CellContext`b]], $CellContext`b], \
$CellContext`listPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
            $CellContext`myIntegerReverse[#, $CellContext`b], $CellContext`b] =!= 
          IntegerDigits[#, $CellContext`b]& , 
          1, $CellContext`m]], $CellContext`listPalindrome2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
              $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 
            1, $CellContext`m], $CellContext`b]]], \
$CellContext`countPalindrome[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestWhileList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& \
, $CellContext`i, IntegerDigits[
             $CellContext`myIntegerReverse[#, $CellContext`b], \
$CellContext`b] =!= IntegerDigits[#, $CellContext`b]& , 1, $CellContext`m]] - 
        1, $CellContext`finalRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`repeat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`listRepeat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRepeat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`repeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           
           NestList[$CellContext`IntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`v]]], $CellContext`listRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]], $CellContext`listRepeat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           
           NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m], $CellContext`b]]], $CellContext`countRepeat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          
          NestList[$CellContext`myIntegerReverse[#, $CellContext`b] + #& , \
$CellContext`i, $CellContext`m]] - 1, $CellContext`finalReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`reorder[$CellContext`i, $CellContext`m, $CellContext`r, \
$CellContext`b, $CellContext`v], 
         $CellContext`listReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`listReorder2[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b], 
         $CellContext`countReorder[$CellContext`i, $CellContext`m, \
$CellContext`r, $CellContext`b]}, $CellContext`reorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`v]]], $CellContext`listReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
            Flatten[
             Delete[
              Prepend[
               IntegerDigits[#, $CellContext`b], 
               Take[
                
                IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]], \
$CellContext`listReorder2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
              Flatten[
               Delete[
                Prepend[
                 IntegerDigits[#, $CellContext`b], 
                 Take[
                  
                  IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m], \
$CellContext`b]]], $CellContext`countReorder[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`r, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
             Flatten[
              Delete[
               Prepend[
                IntegerDigits[#, $CellContext`b], 
                Take[
                 
                 IntegerDigits[#, $CellContext`b], -$CellContext`r]], \
-$CellContext`r]], $CellContext`b] + #& , $CellContext`i, $CellContext`m]] - 
        1, $CellContext`finalRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := {
         $CellContext`rat[$CellContext`i, $CellContext`m, $CellContext`b, \
$CellContext`v], 
         $CellContext`listRat[$CellContext`i, $CellContext`m, $CellContext`b], 
         $CellContext`listRat2[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`countRat[$CellContext`i, $CellContext`m, \
$CellContext`b], 
         $CellContext`ftrRat[$CellContext`i, $CellContext`m, \
$CellContext`b]}, $CellContext`rat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[Integer]]] := ArrayPlot[
         PadLeft[
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`v]]], \
$CellContext`listRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         NestList[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]], $CellContext`listRat2[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Column[
         Map[FromDigits, 
          IntegerDigits[
           NestList[FromDigits[
             Sort[
              
              IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], $CellContext`b]]], \
$CellContext`countRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := Length[
          NestList[FromDigits[
            Sort[
             
             IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m]] - 1, $CellContext`ftrRat[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`m, 
          Blank[Integer]], 
         Pattern[$CellContext`b, 
          Blank[Integer]]] := If[Part[
           $CellContext`FindTransientRepeat[
            NestList[FromDigits[
              Sort[
               
               IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m], 2], 2] =!= {}, 
         NestGraph[FromDigits[
           Sort[
            
            IntegerDigits[$CellContext`myIntegerReverse[#, $CellContext`b] + \
#]]]& , $CellContext`i, $CellContext`m, VertexLabels -> "Name", ImageSize -> 
          Full], "No repeating patten detected"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->618431030]
}, Open  ]],

Cell["", "DetailsSection"],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.676739145796068*^9},
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["Reverse and Add", "SearchTerms",
 CellChangeTimes->{{3.6767391549703693`*^9, 3.676739167427083*^9}},
 CellID->491233193],

Cell["RATS sequence", "SearchTerms",
 CellChangeTimes->{{3.6767391697592993`*^9, 3.6767392088452015`*^9}},
 CellID->536252785],

Cell["196-Algorithm", "SearchTerms",
 CellChangeTimes->{{3.6767391697592993`*^9, 3.6767392077928934`*^9}, {
  3.6767399589682617`*^9, 3.6767399589682617`*^9}},
 CellID->38449857],

Cell["Palindromic numbers", "SearchTerms",
 CellChangeTimes->{{3.6767391697592993`*^9, 3.6767392077928934`*^9}, {
  3.676739960727314*^9, 3.6767399640456553`*^9}},
 CellID->212989253]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["196-Algorithm",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/196-Algorithm.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/196-Algorithm.html"]], "RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.676740039608482*^9}, {
  3.6767401114563546`*^9, 3.6767401114563546`*^9}},
 CellID->261810773],

Cell[TextData[ButtonBox["Lychrel Number",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/LychrelNumber.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/LychrelNumber.html"]], "RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.676740050517826*^9}, {
  3.6767401282061043`*^9, 3.6767401282071247`*^9}},
 CellID->657775774],

Cell[TextData[ButtonBox["Palindromic Number Conjecture",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/PalindromicNumberConjecture.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/PalindromicNumberConjecture.html"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.6767400585735884`*^9}, {
  3.676740089283753*^9, 3.676740089283753*^9}, {3.676740167917853*^9, 
  3.676740167919852*^9}},
 CellID->504571886],

Cell[TextData[ButtonBox["RATS Sequence",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/RATSSequence.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/RATSSequence.html"]], "RelatedLinks",
 CellChangeTimes->{{3.6767400304797096`*^9, 3.6767400585735884`*^9}, {
   3.6767400903865814`*^9, 3.6767400935803347`*^9}, {3.676740189970602*^9, 
   3.676740189971103*^9}, 3.6767403437296715`*^9},
 CellID->110235343],

Cell[TextData[ButtonBox["196-Algorithm: Palindromic Numbers",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/196AlgorithmPalindromicNumbers/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/196AlgorithmPalindromicNumbers/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767402863441296`*^9, 3.6767403123430166`*^9}, {
  3.677347144497058*^9, 3.677347150121036*^9}},
 CellID->431484144],

Cell[TextData[ButtonBox["Reverse-Then-Add Sequences",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/ReverseThenAddSequences/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/ReverseThenAddSequences/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767403691975956`*^9, 3.676740408169938*^9}, {
  3.6767405374325514`*^9, 3.676740560331811*^9}},
 CellID->15223577],

Cell[TextData[ButtonBox["Reversal-Addition Related Systems",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/ReversalAdditionRelatedSystems/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/ReversalAdditionRelatedSystems/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6767405628776474`*^9, 3.6767405883108907`*^9}, {
  3.677347170273159*^9, 3.677347182160966*^9}},
 CellID->534575256],

Cell[TextData[ButtonBox["RATS Sequences",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/RATSSequences/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/RATSSequences/"]], "RelatedLinks",
 CellChangeTimes->{{3.6767405915723543`*^9, 3.6767405927571115`*^9}, {
  3.676740625853815*^9, 3.676740643112234*^9}},
 CellID->172696227]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Neel Gandhi",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Neel+Gandhi"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Neel+Gandhi"]
}], "Author",
 CellChangeTimes->{{3.67673992702921*^9, 3.6767399449991374`*^9}, {
  3.6768163128032064`*^9, 3.676816314846898*^9}}],

Cell["(Mathematica Summer Camp 2016)", "Author",
 CellChangeTimes->{{3.67673992702921*^9, 3.6767399449991374`*^9}, 
   3.6768163128032064`*^9},
 CellID->386680175]
}, Open  ]]
}, Open  ]]
},
WindowSize->{968, 835},
WindowMargins->{{200, Automatic}, {Automatic, 17}},
FrontEndVersion->"10.4 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 25, \
2016)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[212013, 4717, 1464, 31, 24, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[213480, 4750, 908, 21, 24, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[210154, 4666, 637, 15, 24, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[209811, 4653, 340, 11, 24, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[211641, 4706, 369, 9, 24, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[208774, 4624, 353, 9, 24, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[209130, 4635, 678, 16, 24, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[210794, 4683, 844, 21, 24, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 219533, 4926},
 {"BookmarkAnimation", 219651, 4929},
 {"CreateAndDeleteLocators", 219773, 4932},
 {"DragLocators", 219890, 4935},
 {"GamepadControls", 219999, 4938},
 {"ResizeImages", 220107, 4941},
 {"RotateAndZoomIn3D", 220217, 4944},
 {"SliderZoom", 220326, 4947}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[585, 22, 282, 6, 108, "DemoTitle"],
Cell[CellGroupData[{
Cell[892, 32, 33, 0, 275, "InitializationSection"],
Cell[928, 34, 352, 9, 25, "Input",
 InitializationCell->True,
 CellID->287686843],
Cell[1283, 45, 540, 15, 25, "Input",
 InitializationCell->True,
 CellID->362475690],
Cell[1826, 62, 839, 25, 57, "Input",
 InitializationCell->True,
 CellID->9772214],
Cell[2668, 89, 704, 21, 41, "Input",
 InitializationCell->True,
 CellID->86864006],
Cell[3375, 112, 718, 20, 41, "Input",
 InitializationCell->True,
 CellID->350690481],
Cell[4096, 134, 875, 24, 57, "Input",
 InitializationCell->True,
 CellID->561505936],
Cell[4974, 160, 1501, 41, 73, "Input",
 InitializationCell->True,
 CellID->309390949],
Cell[6478, 203, 1279, 35, 105, "Input",
 InitializationCell->True,
 CellID->19268389],
Cell[7760, 240, 1149, 33, 73, "Input",
 InitializationCell->True,
 CellID->721501320],
Cell[8912, 275, 1317, 36, 105, "Input",
 InitializationCell->True,
 CellID->75767443],
Cell[10232, 313, 1145, 33, 89, "Input",
 InitializationCell->True,
 CellID->702680340],
Cell[11380, 348, 690, 22, 41, "Input",
 InitializationCell->True,
 CellID->184246286],
Cell[12073, 372, 579, 17, 25, "Input",
 InitializationCell->True,
 CellID->215291180],
Cell[12655, 391, 719, 20, 41, "Input",
 InitializationCell->True,
 CellID->628778034],
Cell[13377, 413, 560, 17, 25, "Input",
 InitializationCell->True,
 CellID->6778985],
Cell[13940, 432, 894, 26, 57, "Input",
 InitializationCell->True,
 CellID->35421900],
Cell[14837, 460, 901, 26, 57, "Input",
 InitializationCell->True,
 CellID->92820877],
Cell[15741, 488, 1067, 29, 73, "Input",
 InitializationCell->True,
 CellID->23610739],
Cell[16811, 519, 1036, 30, 73, "Input",
 InitializationCell->True,
 CellID->610029810],
Cell[17850, 551, 695, 19, 41, "Input",
 InitializationCell->True,
 CellID->827301962],
Cell[18548, 572, 670, 19, 41, "Input",
 InitializationCell->True,
 CellID->505938915],
Cell[19221, 593, 735, 20, 41, "Input",
 InitializationCell->True,
 CellID->5798319],
Cell[19959, 615, 694, 20, 41, "Input",
 InitializationCell->True,
 CellID->196490909]
}, Closed]],
Cell[CellGroupData[{
Cell[20690, 640, 29, 0, 201, "ManipulateSection"],
Cell[CellGroupData[{
Cell[20744, 644, 5622, 124, 480, "Input"],
Cell[26369, 770, 35423, 740, 544, "Output",
 CellID->1291931999]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[61838, 1516, 36, 0, 174, "ManipulateCaptionSection"],
Cell[61877, 1518, 727, 12, 40, "ManipulateCaption"],
Cell[62607, 1532, 1609, 35, 106, "ManipulateCaption",
 CellID->1761356122],
Cell[64219, 1569, 1004, 27, 41, "ManipulateCaption",
 CellID->2121832977],
Cell[65226, 1598, 1241, 28, 56, "ManipulateCaption",
 CellID->265929673],
Cell[66470, 1628, 604, 11, 40, "ManipulateCaption",
 CellID->360840910],
Cell[67077, 1641, 800, 13, 56, "ManipulateCaption",
 CellID->89552016]
}, Open  ]],
Cell[CellGroupData[{
Cell[67914, 1659, 28, 0, 175, "ThumbnailSection"],
Cell[67945, 1661, 35170, 736, 533, "Output",
 CellID->747834309]
}, Open  ]],
Cell[CellGroupData[{
Cell[103152, 2402, 28, 0, 145, "SnapshotsSection"],
Cell[103183, 2404, 35148, 735, 533, "Output",
 CellID->130440822],
Cell[138334, 3141, 35163, 736, 533, "Output",
 CellID->360084393],
Cell[173500, 3879, 35168, 736, 533, "Output",
 CellID->618431030]
}, Open  ]],
Cell[208683, 4618, 26, 0, 343, "DetailsSection"],
Cell[CellGroupData[{
Cell[208734, 4622, 37, 0, 111, "ControlSuggestionsSection"],
Cell[208774, 4624, 353, 9, 24, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[209130, 4635, 678, 16, 24, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[209811, 4653, 340, 11, 24, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[210154, 4666, 637, 15, 24, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[210794, 4683, 844, 21, 24, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[211641, 4706, 369, 9, 24, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[212013, 4717, 1464, 31, 24, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[213480, 4750, 908, 21, 24, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214425, 4776, 30, 0, 158, "SearchTermsSection"],
Cell[214458, 4778, 126, 2, 23, "SearchTerms",
 CellID->491233193],
Cell[214587, 4782, 126, 2, 23, "SearchTerms",
 CellID->536252785],
Cell[214716, 4786, 178, 3, 23, "SearchTerms",
 CellID->38449857],
Cell[214897, 4791, 183, 3, 23, "SearchTerms",
 CellID->212989253]
}, Open  ]],
Cell[CellGroupData[{
Cell[215117, 4799, 31, 0, 143, "RelatedLinksSection"],
Cell[215151, 4801, 372, 8, 23, "RelatedLinks",
 CellID->261810773],
Cell[215526, 4811, 373, 8, 23, "RelatedLinks",
 CellID->657775774],
Cell[215902, 4821, 465, 10, 23, "RelatedLinks",
 CellID->504571886],
Cell[216370, 4833, 447, 9, 23, "RelatedLinks",
 CellID->110235343],
Cell[216820, 4844, 433, 10, 23, "RelatedLinks",
 CellID->431484144],
Cell[217256, 4856, 406, 9, 23, "RelatedLinks",
 CellID->15223577],
Cell[217665, 4867, 432, 10, 23, "RelatedLinks",
 CellID->534575256],
Cell[218100, 4879, 373, 8, 23, "RelatedLinks",
 CellID->172696227]
}, Open  ]],
Cell[CellGroupData[{
Cell[218510, 4892, 25, 0, 149, "AuthorSection"],
Cell[218538, 4894, 411, 11, 23, "Author"],
Cell[218952, 4907, 163, 3, 23, "Author",
 CellID->386680175]
}, Open  ]]
}, Open  ]]
}
]
*)

